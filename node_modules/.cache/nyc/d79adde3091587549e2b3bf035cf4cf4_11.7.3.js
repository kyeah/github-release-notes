'use strict';var cov_c3n1p8v2m=function(){var path='/Users/kyeah/jam/github-release-notes/lib/_options.js',hash='43ea9289d5b992eafa0faed66a9482c71fb935ed',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/kyeah/jam/github-release-notes/lib/_options.js',statementMap:{'0':{start:{line:3,column:12},end:{line:3,column:28}},'1':{start:{line:5,column:0},end:{line:151,column:2}},'2':{start:{line:59,column:12},end:{line:59,column:37}},'3':{start:{line:86,column:12},end:{line:86,column:36}},'4':{start:{line:94,column:12},end:{line:94,column:36}},'5':{start:{line:112,column:12},end:{line:112,column:36}},'6':{start:{line:120,column:12},end:{line:120,column:36}}},fnMap:{'0':{name:'action',decl:{start:{line:58,column:25},end:{line:58,column:31}},loc:{start:{line:58,column:39},end:{line:60,column:9}},line:58},'1':{name:'action',decl:{start:{line:85,column:25},end:{line:85,column:31}},loc:{start:{line:85,column:39},end:{line:87,column:9}},line:85},'2':{name:'action',decl:{start:{line:93,column:25},end:{line:93,column:31}},loc:{start:{line:93,column:39},end:{line:95,column:9}},line:93},'3':{name:'action',decl:{start:{line:111,column:25},end:{line:111,column:31}},loc:{start:{line:111,column:39},end:{line:113,column:9}},line:111},'4':{name:'action',decl:{start:{line:119,column:25},end:{line:119,column:31}},loc:{start:{line:119,column:39},end:{line:121,column:9}},line:119}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var chalk=(cov_c3n1p8v2m.s[0]++,require('chalk'));cov_c3n1p8v2m.s[1]++;module.exports={changelogOptions:[{short:false,name:false,description:'\n'+chalk.yellow('Changelog options')+'\n\n'},{short:'-G',name:'generate',description:'Generate the changelog with gren rather then using the repo releases'},{short:'-f',name:'changelog-filename',valueType:'<filename.md>',description:'The name of the changelog file. [CHANGELOG.md]',defaultValue:'CHANGELOG.md'},{short:false,name:false,description:'\n\n'+chalk.yellow('Release options')+' \n'+chalk.blue('(only applicable with the --generate option).')+'\n\n'}],globalOptions:[{short:'-u',name:'username',valueType:'<repo owner>',description:'The username of the repo e.g. github-tools'},{short:'-r',name:'repo',valueType:'<repository name>',description:'The repository name e.g. github-release-notes'},{short:'-T',name:'token',valueType:'<github token>',description:'The token generated with repo access'},{short:'-a',name:'api-url',valueType:'<url>',description:'Override the GitHub API URL, allows gren to connect to a private GHE installation'},{short:'-o',name:'override',description:'Override the release notes if exist'},{short:'-B',name:'debug',description:'Run the command in debugging mode'},{short:'-t',name:'tags',valueType:'<new-tag>..<old-tag>',description:'Write release notes for <new-tag> using data collected until <old-tag>. If only one tag is specified, will use data until the previous tag. To run gren for all the tags, use --tags=all',action:function action(value){cov_c3n1p8v2m.f[0]++;cov_c3n1p8v2m.s[2]++;return value.split('..');}},{short:'-l',name:'limit',valueType:'<number>',description:'Just produce release notes for the <number> last releases.'},{short:'-D',name:'data-source',valueType:'<issues|commits|milestones|prs>',description:'The informations you want to use to build release notes. [issues]',action:/^(issues|commits|milestones|prs)$/i,defaultValue:'issues'},{short:'-N',name:'include-messages',valueType:'<merge|commits|all>',description:'Filter the messages added to the release notes. Only used when --data-source used is commits [commits]',action:/^(merge|commits|all)$/i,defaultValue:'commits'},{short:'-i',name:'ignore-tags-with',valueType:'<string1>,<string2>',description:'Ignore tags that contain one of the specified strings.',action:function action(value){cov_c3n1p8v2m.f[1]++;cov_c3n1p8v2m.s[3]++;return value.split(',');}},{short:'-C',name:'ignore-commits-with',valueType:'<string1>,<string2>',description:'Ignore commits that contain one of the specified strings.',action:function action(value){cov_c3n1p8v2m.f[2]++;cov_c3n1p8v2m.s[4]++;return value.split(',');}},{short:'-p',name:'prefix',valueType:'<name prefix>',description:'Add a prefix to the tag version. e.g. \'v\''},{short:'-g',name:'group-by',valueType:'<label>',description:'Group the issues using the labels as group headings. You can set custom headings for groups of labels from a configuration file.'},{short:'-L',name:'ignore-labels',valueType:'<label1>,<label2>',description:'Ignore the specified labels.',action:function action(value){cov_c3n1p8v2m.f[3]++;cov_c3n1p8v2m.s[5]++;return value.split(',');}},{short:'-I',name:'ignore-issues-with',valueType:'<label1>,<label2>',description:'Ignore issues that contains one of the specified labels.',action:function action(value){cov_c3n1p8v2m.f[4]++;cov_c3n1p8v2m.s[6]++;return value.split(',');}},{short:'-M',name:'milestone-match',valueType:'<prefix>',description:'The title that the script needs to match to link the release to the milestone. e.g. v will match v0.1.0 [Release {{tag_name}}]',defaultValue:'Release {{tag_name}}'},{short:'-m',name:'only-milestones',description:'Add to the release bodies only the issues that have a milestone'},{short:'-q',name:'quiet',description:'Run command without console logs.'},{short:'-c',name:'config',valueType:'<string>',description:'Specify a custom config filename'}],releaseOptions:[{short:'-d',name:'draft',description:'Set the release notes as a draft.'},{short:'-P',name:'prerelease',description:'Set the release as a prerelease.'}]};//# sourceMappingURL=data:application/json;charset=utf-8;base64,