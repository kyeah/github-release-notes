{"version":3,"sources":["GitHubInfo.js"],"names":["GitHubInfo","command","callback","resolve","reject","err","stdout","stderr","replace","then","catch","error","Error","chalk","red","yellow","_executeCommand","repoPath","repo","user","name","username","token","process","env","GREN_GITHUB_TOKEN","all","_repo","_token"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA;IACMA,U;;;;;;;;;AA+BF;;;;;;;;;;;wCAWgBC,O,EAASC,Q,EAAU;AAC/B,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,yCAAKH,OAAL,EAAc,UAACI,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAyB;AACnC,wBAAIF,OAAOE,MAAX,EAAmB;AACfH,+BAAOC,OAAOE,MAAd;AACH,qBAFD,MAEO;AACHJ,gCAAQG,OAAOE,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAR;AACH;AACJ,iBAND;AAOH,aARM,EASFC,IATE,CASGP,QATH,EAUFQ,KAVE,CAUI,UAACC,KAAD,EAAW;AACd,sBAAM,IAAIC,KAAJ,CAAUC,gBAAMC,GAAN,CAAUH,KAAV,IAAmBE,gBAAME,MAAN,CAAa,6GAAb,CAA7B,CAAN;AACH,aAZE,CAAP;AAaH;;AAED;;;;;;;;;;;;;8BAUMb,Q,EAAU;AACZ,mBAAO,KAAKc,eAAL,CAAqB,8BAArB,EAAqD,gBAAQ;AAChE,oBAAMC,WAAW,6BAAS,8BAAT,EAAyCC,IAAzC,CAAjB;;AAEA,oBAAI,CAACD,SAAS,CAAT,CAAL,EAAkB;AACd,2BAAO,kBAAQb,MAAR,CAAe,eAAf,CAAP;AACH;;AAED,oBAAMe,OAAOF,SAAS,CAAT,EAAY,CAAZ,CAAb;AACA,oBAAMG,OAAOH,SAAS,CAAT,EAAY,CAAZ,CAAb;;AAEA,uBAAO;AACHI,8BAAUF,IADP;AAEHD,0BAAME;AAFH,iBAAP;AAIH,aAdM,EAcJX,IAdI,CAcCP,QAdD,CAAP;AAeH;;AAED;;;;;;;;;;;;;iCAUS;AACL,gBAAMoB,QAAQC,QAAQC,GAAR,CAAYC,iBAA1B;;AAEA,mBAAOH,QAAQ,kBAAQnB,OAAR,CAAgB,EAAEmB,YAAF,EAAhB,CAAR,GAAqC,kBAAQnB,OAAR,CAAgB,IAAhB,CAA5C;AACH;;;;AAnGD;;;;;4BAKc;AACV,mBAAO,kBAAQuB,GAAR,CAAY,CACf,KAAKC,KAAL,EADe,EAEf,KAAKC,MAAL,EAFe,CAAZ,CAAP;AAIH;;AAED;;;;;;;;4BAKY;AACR,mBAAO,KAAKA,MAAL,EAAP;AACH;;AAED;;;;;;;;4BAKW;AACP,mBAAO,KAAKD,KAAL,EAAP;AACH;;;;;kBA0EU3B,U","file":"GitHubInfo.js","sourceRoot":"/Users/kyeah/jam/github-release-notes/lib/src","sourcesContent":["import { exec } from 'child_process';\nimport chalk from 'chalk';\nimport { matchAll } from 'regex-match-all';\n\n/** Class retrieving GitHub informations from the folder where .git is initialised. */\nclass GitHubInfo {\n    /**\n     * Getter for the options\n     *\n     * @return {Promise.all}\n     */\n    get options() {\n        return Promise.all([\n            this._repo(),\n            this._token()\n        ]);\n    }\n\n    /**\n     * Getter for the token\n     *\n     * @return {Promise}\n     */\n    get token() {\n        return this._token();\n    }\n\n    /**\n     * Getter for the repo\n     *\n     * @return {Promise}\n     */\n    get repo() {\n        return this._repo();\n    }\n\n    /**\n    * Execute a command in the bash and run a callback\n    *\n    * @since 0.5.0\n    * @private\n    *\n    * @param  {string}   command The command to execute\n    * @param  {Function} callback The callback which returns the stdout\n    *\n    * @return {Promise}\n    */\n    _executeCommand(command, callback) {\n        return new Promise((resolve, reject) => {\n            exec(command, (err, stdout, stderr) => {\n                if (err || stderr) {\n                    reject(err || stderr);\n                } else {\n                    resolve(stdout.replace('\\n', ''));\n                }\n            });\n        })\n            .then(callback)\n            .catch((error) => {\n                throw new Error(chalk.red(error) + chalk.yellow('\\nMake sure you\\'re running the command from the repo folder, or you using the --username and --repo flags.'));\n            });\n    }\n\n    /**\n    * Get repo informations\n    *\n    * @since 0.5.0\n    * @public\n    *\n    * @param  {Function} callback\n    *\n    * @return {Promise} The promise that resolves repo informations ({user: user, name: name})\n    */\n    _repo(callback) {\n        return this._executeCommand('git config remote.origin.url', repo => {\n            const repoPath = matchAll(/([\\w-]+)\\/([\\w-]+)(\\.git)?$/g, repo);\n\n            if (!repoPath[1]) {\n                return Promise.reject('No repo found');\n            }\n\n            const user = repoPath[1][0];\n            const name = repoPath[1][1];\n\n            return {\n                username: user,\n                repo: name\n            };\n        }).then(callback);\n    }\n\n    /**\n    * Get token informations\n    *\n    * @since 0.5.0\n    * @public\n    *\n    * @param  {Function} callback\n    *\n    * @return {Promise} The promise that resolves token informations ({token: token})\n    */\n    _token() {\n        const token = process.env.GREN_GITHUB_TOKEN;\n\n        return token ? Promise.resolve({ token }) : Promise.resolve(null);\n    }\n}\n\nexport default GitHubInfo;\n"]}