{"version":3,"sources":["_utils.js"],"names":["chalk","require","fs","ora","YAML","Path","beautify","js_beautify","sortObject","object","sort","reduce","result","key","printTask","isQuiet","name","process","stdout","write","blue","task","gren","taskName","options","quiet","tasks","noop","spinner","start","succeed","message","clearTasks","length","forEach","stop","red","isInRange","value","min","max","Math","floor","dashToCamelCase","toLowerCase","replace","match","toUpperCase","convertStringToArray","arrayLike","map","itemKey","split","itemName","formatDate","date","getDate","slice","getMonth","getFullYear","requireConfig","filepath","existsSync","getFileNameFromPath","JSON","parse","readFileSync","getConfigFromFile","path","customFilename","config","join","getFileTypes","carry","filename","getFileExtension","lastIndexOf","Infinity","writeConfigToFile","data","extension","dataType","yml","stringify","content","yaml","json","none","js","cleanConfig","confirm","cwd","file","fileName","unlinkSync","module","exports"],"mappings":"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","file":"_utils.js","sourceRoot":"/Users/kyeah/jam/github-release-notes/lib/src","sourcesContent":["const chalk = require('chalk');\nconst fs = require('fs');\nconst ora = require('ora');\nconst YAML = require('json2yaml');\nconst Path = require('path');\nconst { js_beautify: beautify } = require('js-beautify');\nrequire('require-yaml');\n\n/**\n * Sort an object by its keys\n *\n * @since 0.8.0\n * @public\n *\n * @param  {Object} object\n * @return {Object}\n */\nfunction sortObject(object) {\n    return Object.keys(object)\n        .sort()\n        .reduce((result, key) => {\n            result[key] = object[key];\n\n            return result;\n        }, {});\n}\n\n/**\n* Print a task name in a custom format\n*\n* @since 0.5.0\n* @public\n*\n* @param  {string} name The name of the task\n*/// istanbul ignore next\nfunction printTask(isQuiet, name) {\n    if (isQuiet) {\n        return;\n    }\n\n    process.stdout.write(chalk.blue(`\\nðŸ¤–  - ${name}:\\n===================================\\n`));\n}\n\n/**\n* Outputs the task status\n*\n* @since 0.5.0\n* @public\n*\n* @param  {string} taskName The task name\n*\n* @return {Function}          The function to be fired when is loaded\n*/// istanbul ignore next\nfunction task(gren, taskName) {\n    if (gren.options.quiet) {\n        gren.tasks[taskName] = {};\n\n        return noop;\n    }\n    const spinner = ora(taskName);\n    gren.tasks[taskName] = spinner;\n\n    spinner.start();\n\n    return message => {\n        spinner.succeed(message);\n    };\n}\n\n/**\n * Clears all the tasks that are still running\n *\n * @since 0.6.0\n * @public\n *\n * @param  {GithubReleaseNotes} gren\n */// istanbul ignore next\nfunction clearTasks(gren) {\n    if (!Object.keys(gren.tasks.length)) {\n        return;\n    }\n\n    Object.keys(gren.tasks).forEach((taskName) => {\n        gren.tasks[taskName].stop();\n    });\n\n    process.stdout.write(chalk.red('\\nTask(s) stopped because of the following error:\\n'));\n\n    gren.tasks = [];\n}\n\n/**\n* Check if e value is between a min and a max\n*\n* @since 0.5.0\n* @public\n*\n* @param  {number}  value\n* @param  {number}  min\n* @param  {number}  max\n*\n* @return {Boolean}\n*/\nfunction isInRange(value, min, max) {\n    return !Math.floor((value - min) / (max - min));\n}\n\n/**\n* Transforms a dasherize string into a camel case one.\n*\n* @since 0.3.2\n* @public\n*\n* @param  {string} value The dasherize string\n*\n* @return {string}       The camel case string\n*/\nfunction dashToCamelCase(value) {\n    return value\n        .toLowerCase()\n        .replace(/-([a-z])/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts an array like string to an actual Array,\n * converting also underscores to spaces\n *\n * @since 0.6.0\n * @public\n *\n * @param  {string} arrayLike The string of items\n * e.g.\n * \"wont_fix, duplicate, bug\"\n *\n * @return {Array}  The items with spaces instead of underscores.\n */\nfunction convertStringToArray(arrayLike) {\n    if (!arrayLike) {\n        return [];\n    }\n\n    if (typeof arrayLike === 'object') {\n        return Object.keys(arrayLike).map((itemKey) => arrayLike[itemKey]);\n    }\n\n    return arrayLike\n        .replace(/\\s/g, '')\n        .split(',')\n        .map((itemName) => itemName.replace(/_/g, ' ', itemName));\n}\n\n/**\n* Format a date into a string\n*\n* @since 0.5.0\n* @public\n*\n* @param  {Date} date\n* @return {string}\n*/\nfunction formatDate(date) {\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + date.getFullYear();\n}\n\n/**\n * Gets the content from a filepath a returns an object\n *\n * @since  0.6.0\n * @public\n *\n * @param  {string} filepath\n * @return {Object|boolean}\n */\nfunction requireConfig(filepath) {\n    if (!fs.existsSync(filepath)) {\n        return false;\n    }\n\n    if (getFileNameFromPath(filepath).match(/\\./g).length === 1) {\n        return JSON.parse(fs.readFileSync(filepath, 'utf8'));\n    }\n\n    return require(filepath);\n}\n\n/**\n * Get configuration from the one of the config files\n *\n * @since 0.6.0\n * @public\n *\n * @param  {string} path Path where to look for config files\n * @return {Object} The configuration from the first found file or empty object\n */\nfunction getConfigFromFile(path, customFilename = null) {\n    if (customFilename) {\n        const config = requireConfig(Path.join(path, customFilename));\n        if (!config) {\n            throw chalk.red(`Could not find custom config file: ${customFilename}`);\n        }\n        return config;\n    }\n\n    return getFileTypes()\n        .reduce((carry, filename) => carry || requireConfig(Path.join(path, filename)), false) || {};\n}\n\n/**\n * Return the extension of a filename\n *\n * @param  {string} filename\n *\n * @return {string}\n */\nfunction getFileExtension(filename) {\n    return filename.slice((Math.max(0, filename.lastIndexOf('.')) || Infinity) + 1);\n}\n\n/**\n * Create the content for a configuratio file, based on extension and data\n *\n * @param  {string} path\n * @param  {Object} data\n *\n * @return {string} File content\n */// istanbul ignore next\nfunction writeConfigToFile(path, data) {\n    const extension = getFileExtension(getFileNameFromPath(path));\n    const dataType = {\n        yml: content => YAML.stringify(content),\n        yaml: content => YAML.stringify(content),\n        json: content => beautify(JSON.stringify(content)),\n        none: content => beautify(JSON.stringify(content)),\n        js: content => beautify(`module.exports = ${JSON.stringify(content)}`)\n    };\n\n    return dataType[extension || 'none'](data);\n}\n\n/**\n * Get the filename from a path\n *\n * @since  0.10.0\n * @private\n *\n * @param  {string} path\n *\n * @return {string}\n */\nfunction getFileNameFromPath(path = '') {\n    return path.replace(/^.*[\\\\/]/, '');\n}\n\n/**\n * Get the file types for the configuration\n *\n * @since  0.13.0\n *\n * @return {Array}\n */\nfunction getFileTypes() {\n    return [\n        '.grenrc.yml',\n        '.grenrc.json',\n        '.grenrc.yaml',\n        '.grenrc.js',\n        '.grenrc'\n    ];\n}\n\n/**\n * Remove all the configuration files\n *\n * @since  0.13.0\n *\n * @param {Boolean} confirm     Necessary to force the function.\n */\nfunction cleanConfig(confirm, path = process.cwd()) {\n    if (confirm !== true) {\n        return;\n    }\n\n    getFileTypes().forEach(fileName => {\n        const file = `${path}/${fileName}`;\n        if (!fs.existsSync(file)) {\n            return false;\n        }\n\n        fs.unlinkSync(file);\n\n        return file;\n    });\n}\n\n/**\n * Just a noop function\n */\nfunction noop() {}\n\n// Allow nodeunit to work. Has to be fixed.\nmodule.exports = {\n    cleanConfig,\n    clearTasks,\n    convertStringToArray,\n    dashToCamelCase,\n    formatDate,\n    getConfigFromFile,\n    getFileExtension,\n    getFileNameFromPath,\n    getFileTypes,\n    isInRange,\n    noop,\n    printTask,\n    requireConfig,\n    sortObject,\n    task,\n    writeConfigToFile\n};\n"]}