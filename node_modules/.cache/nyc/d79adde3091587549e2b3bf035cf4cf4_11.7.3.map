{"version":3,"sources":["_options.js"],"names":["chalk","require","module","exports","changelogOptions","short","name","description","yellow","valueType","defaultValue","blue","globalOptions","action","value","split","releaseOptions"],"mappings":"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","file":"_options.js","sourceRoot":"/Users/kyeah/jam/github-release-notes/lib","sourcesContent":["const chalk = require('chalk');\n\nmodule.exports = {\n    changelogOptions: [\n        {\n            short: false,\n            name: false,\n            description: `\\n${chalk.yellow('Changelog options')}\\n\\n`\n        },\n        {\n            short: '-G',\n            name: 'generate',\n            description:\n                'Generate the changelog with gren rather then using the repo releases'\n        },\n        {\n            short: '-f',\n            name: 'changelog-filename',\n            valueType: '<filename.md>',\n            description: 'The name of the changelog file. [CHANGELOG.md]',\n            defaultValue: 'CHANGELOG.md'\n        },\n        {\n            short: false,\n            name: false,\n            description: `\\n\\n${chalk.yellow('Release options')} \\n${chalk.blue(\n                '(only applicable with the --generate option).'\n            )}\\n\\n`\n        }\n    ],\n    globalOptions: [\n        {\n            short: '-u',\n            name: 'username',\n            valueType: '<repo owner>',\n            description: 'The username of the repo e.g. github-tools'\n        },\n        {\n            short: '-r',\n            name: 'repo',\n            valueType: '<repository name>',\n            description: 'The repository name e.g. github-release-notes'\n        },\n        {\n            short: '-T',\n            name: 'token',\n            valueType: '<github token>',\n            description: 'The token generated with repo access'\n        },\n        {\n            short: '-a',\n            name: 'api-url',\n            valueType: '<url>',\n            description:\n                'Override the GitHub API URL, allows gren to connect to a private GHE installation'\n        },\n        {\n            short: '-o',\n            name: 'override',\n            description: 'Override the release notes if exist'\n        },\n        {\n            short: '-B',\n            name: 'debug',\n            description: 'Run the command in debugging mode'\n        },\n        {\n            short: '-t',\n            name: 'tags',\n            valueType: '<new-tag>..<old-tag>',\n            description:\n                'Write release notes for <new-tag> using data collected until <old-tag>. If only one tag is specified, will use data until the previous tag. To run gren for all the tags, use --tags=all',\n            action: value => value.split('..')\n        },\n        {\n            short: '-l',\n            name: 'limit',\n            valueType: '<number>',\n            description:\n                'Just produce release notes for the <number> last releases.'\n        },\n        {\n            short: '-D',\n            name: 'data-source',\n            valueType: '<issues|commits|milestones|prs>',\n            description:\n                'The informations you want to use to build release notes. [issues]',\n            action: /^(issues|commits|milestones|prs)$/i,\n            defaultValue: 'issues'\n        },\n        {\n            short: '-N',\n            name: 'include-messages',\n            valueType: '<merge|commits|all>',\n            description:\n                'Filter the messages added to the release notes. Only used when --data-source used is commits [commits]',\n            action: /^(merge|commits|all)$/i,\n            defaultValue: 'commits'\n        },\n        {\n            short: '-i',\n            name: 'ignore-tags-with',\n            valueType: '<string1>,<string2>',\n            description:\n                'Ignore tags that contain one of the specified strings.',\n            action: value => value.split(',')\n        },\n        {\n            short: '-C',\n            name: 'ignore-commits-with',\n            valueType: '<string1>,<string2>',\n            description:\n                'Ignore commits that contain one of the specified strings.',\n            action: value => value.split(',')\n        },\n        {\n            short: '-p',\n            name: 'prefix',\n            valueType: '<name prefix>',\n            description: 'Add a prefix to the tag version. e.g. \\'v\\''\n        },\n        {\n            short: '-g',\n            name: 'group-by',\n            valueType: '<label>',\n            description:\n                'Group the issues using the labels as group headings. You can set custom headings for groups of labels from a configuration file.'\n        },\n        {\n            short: '-L',\n            name: 'ignore-labels',\n            valueType: '<label1>,<label2>',\n            description: 'Ignore the specified labels.',\n            action: value => value.split(',')\n        },\n        {\n            short: '-I',\n            name: 'ignore-issues-with',\n            valueType: '<label1>,<label2>',\n            description:\n                'Ignore issues that contains one of the specified labels.',\n            action: value => value.split(',')\n        },\n        {\n            short: '-M',\n            name: 'milestone-match',\n            valueType: '<prefix>',\n            description:\n                'The title that the script needs to match to link the release to the milestone. e.g. v will match v0.1.0 [Release {{tag_name}}]',\n            defaultValue: 'Release {{tag_name}}'\n        },\n        {\n            short: '-m',\n            name: 'only-milestones',\n            description:\n                'Add to the release bodies only the issues that have a milestone'\n        },\n        {\n            short: '-q',\n            name: 'quiet',\n            description: 'Run command without console logs.'\n        },\n        {\n            short: '-c',\n            name: 'config',\n            valueType: '<string>',\n            description: 'Specify a custom config filename'\n        }\n    ],\n    releaseOptions: [\n        {\n            short: '-d',\n            name: 'draft',\n            description: 'Set the release notes as a draft.'\n        },\n        {\n            short: '-P',\n            name: 'prerelease',\n            description: 'Set the release as a prerelease.'\n        }\n    ]\n};\n\n"]}