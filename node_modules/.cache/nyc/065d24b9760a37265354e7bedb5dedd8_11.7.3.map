{"version":3,"sources":["Gren.js"],"names":["defaults","tags","prefix","template","templateConfig","prerelease","generate","quiet","override","debug","ignoreLabels","ignoreIssuesWith","ignoreCommitsWith","groupBy","milestoneMatch","MAX_TAGS_LIMIT","TAGS_LIMIT","Gren","props","options","tasks","username","repo","token","apiUrl","limit","ignoreTagsWith","utils","convertStringToArray","indexOf","chalk","red","_outputOptions","githubApi","Github","getRepo","issues","getIssues","printTask","_hasNetwork","_getReleaseBlocks","blocks","reduce","carry","block","then","_prepareRelease","bind","resolve","_checkChangelogFile","_getListReleases","releases","length","_createChangelog","_templateReleases","filePath","process","cwd","changelogFilename","fs","existsSync","black","bgYellow","body","loaded","task","writeFileSync","changelogTitle","green","releaseId","releaseOptions","updateRelease","release","data","name","blue","html_url","createRelease","tag_name","draft","id","console","warn","_editRelease","_createRelease","allTags","selectedTags","concat","filter","index","isSelectedTag","includes","push","slice","_request","__fullname","page","_listTags","per_page","link","headers","filteredTags","_getSelectedTags","Boolean","every","match","ignoreTag","map","tagRelease","tag","totalPages","_getLastPage","_getLastTags","moreTags","getCommit","commit","sha","committer","date","since","listPullRequests","state","sort","direction","results","prs","filterPrs","pr","merged_at","updated_at","_getMergedPullRequests","prsResults","linkMatch","_listReleases","moreReleases","formatDate","Date","published_at","join","releaseSeparator","author","message","split","url","issue","labels","noLabel","label","_templateLabels","title","text","number","rangeBody","Array","isArray","groups","key","value","heading","group","messageType","includeMessages","filterMap","merges","commits","all","shouldIgnoreMessage","regex","RegExp","commitMessage","bodyMessages","_filterCommit","_templateCommits","until","listCommits","releaseRanges","taskName","range","_getCommitsBetweenTwo","_generateCommitsBody","ranges","some","type","milestones","dataSource","listIssues","forEach","labelName","_templateIssue","_templateGroups","sortObject","passedIssues","_groupByLabel","allLabels","i","arr","groupIssues","isOtherLabel","pull_request","_lablesAreIgnored","onlyMilestones","milestone","pullRequest","replace","isInRange","parse","closed_at","_getClosedIssues","filteredIssues","_filterIssue","_filterBlockIssue","_groupBy","_templateBody","totalPrs","filteredPullRequests","_filterPullRequest","_filterBlockPullRequest","releaseDates","release1","release2","sortedReleaseDates","_sortReleasesByDate","_getIssueBlocks","_getCommitBlocks","_getPullRequestsBlocks","_validateRequiredTagsExists","_getTagDates","_createReleaseRanges","requireTags","tagsNames","tagData","missingTags","requireTag","inflection","isOnline","yellow","camelcaseToSpaces","toLowerCase","a","toUpperCase","outputs","option","toString","stdout","write"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AACbC,UAAM,EADO;AAEbC,YAAQ,EAFK;AAGbC,cAAUC,mBAHG;AAIbC,gBAAY,KAJC;AAKbC,cAAU,KALG;AAMbC,WAAO,KANM;AAObC,cAAU,KAPG;AAQbC,WAAO,KARM;AASbC,kBAAc,KATD;AAUbC,sBAAkB,KAVL;AAWbC,uBAAmB,KAXN;AAYbC,aAAS,KAZI;AAabC,oBAAgB;AAbH,CAAjB;;AAgBA,IAAMC,iBAAiB,EAAvB;AACA,IAAMC,aAAa,EAAnB;;AAEA;;IACMC,I;AACF,oBAAwB;AAAA,YAAZC,KAAY,uEAAJ,EAAI;AAAA;;AACpB,aAAKC,OAAL,GAAe,gCAAa,EAAb,EAAiBnB,QAAjB,EAA2BkB,KAA3B,CAAf;AACA,aAAKE,KAAL,GAAa,EAAb;;AAFoB,uBAehB,KAAKD,OAfW;AAAA,YAKhBE,QALgB,YAKhBA,QALgB;AAAA,YAMhBC,IANgB,YAMhBA,IANgB;AAAA,YAOhBC,KAPgB,YAOhBA,KAPgB;AAAA,YAQhBC,MARgB,YAQhBA,MARgB;AAAA,YAShBvB,IATgB,YAShBA,IATgB;AAAA,YAUhBwB,KAVgB,YAUhBA,KAVgB;AAAA,YAWhBf,YAXgB,YAWhBA,YAXgB;AAAA,YAYhBC,gBAZgB,YAYhBA,gBAZgB;AAAA,YAahBC,iBAbgB,YAahBA,iBAbgB;AAAA,YAchBc,cAdgB,YAchBA,cAdgB;;;AAiBpB,aAAKP,OAAL,CAAalB,IAAb,GAAoB0B,gBAAMC,oBAAN,CAA2B3B,IAA3B,CAApB;AACA,aAAKkB,OAAL,CAAaT,YAAb,GAA4BiB,gBAAMC,oBAAN,CAA2BlB,YAA3B,CAA5B;AACA,aAAKS,OAAL,CAAaR,gBAAb,GAAgCgB,gBAAMC,oBAAN,CAA2BjB,gBAA3B,CAAhC;AACA,aAAKQ,OAAL,CAAaP,iBAAb,GAAiCe,gBAAMC,oBAAN,CAA2BhB,iBAA3B,CAAjC;AACA,aAAKO,OAAL,CAAaO,cAAb,GAA8BC,gBAAMC,oBAAN,CAA2BF,cAA3B,CAA9B;;AAEA,YAAID,SAASA,QAAQ,CAAjB,IAAsBA,SAASV,cAAnC,EAAmD;AAC/C,iBAAKI,OAAL,CAAaM,KAAb,GAAqBA,KAArB;AACH,SAFD,MAEO,IAAI,KAAKN,OAAL,CAAalB,IAAb,CAAkB4B,OAAlB,CAA0B,KAA1B,KAAoC,CAAxC,EAA2C;AAC9C,iBAAKV,OAAL,CAAaM,KAAb,GAAqBV,cAArB;AACH,SAFM,MAEA;AACH,iBAAKI,OAAL,CAAaM,KAAb,GAAqBT,UAArB;AACH;;AAED,YAAI,CAACO,KAAL,EAAY;AACR,kBAAMO,gBAAMC,GAAN,CAAU,4BAAV,CAAN;AACH;;AAED,YAAI,KAAKZ,OAAL,CAAaV,KAAjB,EAAwB;AACpB,iBAAKuB,cAAL,CAAoB,KAAKb,OAAzB;AACH;;AAED,YAAMc,YAAY,IAAIC,mBAAJ,CAAW;AACzBX;AADyB,SAAX,EAEfC,MAFe,CAAlB;;AAIA,aAAKF,IAAL,GAAYW,UAAUE,OAAV,CAAkBd,QAAlB,EAA4BC,IAA5B,CAAZ;AACA,aAAKc,MAAL,GAAcH,UAAUI,SAAV,CAAoBhB,QAApB,EAA8BC,IAA9B,CAAd;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;AASIK,gDAAMW,SAAN,CAAgB,KAAKnB,OAAL,CAAaZ,KAA7B,EAAoC,wBAApC;;;uCAEM,KAAKgC,WAAL,E;;;;uCACe,KAAKC,iBAAL,E;;;AAAfC,sC;iEAECA,OAAOC,MAAP,CAAc,UAACC,KAAD,EAAQC,KAAR;AAAA,2CAAkBD,MAAME,IAAN,CAAW,MAAKC,eAAL,CAAqBC,IAArB,CAA0B,KAA1B,EAAgCH,KAAhC,CAAX,CAAlB;AAAA,iCAAd,EAAoF,kBAAQI,OAAR,EAApF,C;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;;;;AASIrB,gDAAMW,SAAN,CAAgB,KAAKnB,OAAL,CAAaZ,KAA7B,EAAoC,yBAApC;;;uCAEM,KAAKgC,WAAL,E;;;AACN,qCAAKU,mBAAL;;qCAEiB,KAAK9B,OAAL,CAAab,Q;;;;;;uCAAiB,KAAKkC,iBAAL,E;;;;;;;;;uCAAiC,KAAKU,gBAAL,E;;;;;;AAA1EC,wC;;sCAEFA,SAASC,MAAT,KAAoB,C;;;;;sCACdtB,gBAAMC,GAAN,CAAU,4FAAV,C;;;kEAGH,KAAKsB,gBAAL,CAAsB,KAAKC,iBAAL,CAAuBH,QAAvB,CAAtB,C;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;8CAQsB;AAClB,gBAAMI,WAAWC,QAAQC,GAAR,KAAgB,GAAhB,GAAsB,KAAKtC,OAAL,CAAauC,iBAApD;;AAEA,gBAAIC,aAAGC,UAAH,CAAcL,QAAd,KAA2B,CAAC,KAAKpC,OAAL,CAAaX,QAA7C,EAAuD;AACnD,sBAAMsB,gBAAM+B,KAAN,CAAY/B,gBAAMgC,QAAN,CAAe,wEAAf,CAAZ,CAAN;AACH;;AAED,mBAAOP,QAAP;AACH;;AAED;;;;;;;;;;;yCAQiBQ,I,EAAM;AACnB,gBAAMC,SAASrC,gBAAMsC,IAAN,CAAW,IAAX,gBAA6B,KAAK9C,OAAL,CAAauC,iBAA1C,CAAf;AACA,gBAAMH,WAAWC,QAAQC,GAAR,KAAgB,GAAhB,GAAsB,KAAKtC,OAAL,CAAauC,iBAApD;;AAEAC,yBAAGO,aAAH,CAAiBX,QAAjB,EAA2B,KAAKpC,OAAL,CAAahB,QAAb,CAAsBgE,cAAtB,GAAuCJ,IAAlE;;AAEAC,mBAAOlC,gBAAMsC,KAAN,6BAAsCb,QAAtC,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;mHAoBmBc,S,EAAWC,c;;;;;;;AACpBN,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,EAAiB,yBAAjB,C;;uCACiB,KAAK3C,IAAL,CAAUiD,aAAV,CAAwBF,SAAxB,EAAmCC,cAAnC,C;;;;AAAlBE,uC,SAANC,I;;;AAERT,uCAAOlC,gBAAMsC,KAAN,CAAeI,QAAQE,IAAvB,wCAAgE5C,gBAAM6C,IAAN,8BAAsCH,QAAQI,QAA9C,CAAvE;;kEAEOJ,O;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;;;;;;;;mHAkBqBF,c;;;;;;;AACXN,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,EAAiB,uBAAjB,C;;uCACiB,KAAK3C,IAAL,CAAUuD,aAAV,CAAwBP,cAAxB,C;;;;AAAlBE,uC,SAANC,I;;;AAERT,uCAAOlC,gBAAMsC,KAAN,QAAiBI,QAAQE,IAAzB,wCAAkE5C,gBAAM6C,IAAN,8BAAsCH,QAAQI,QAA9C,CAAzE;;kEAEOJ,O;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;wCAUgB5B,K,EAAO;AACnB,gBAAM0B,iBAAiB;AACnBQ,0BAAUlC,MAAM4B,OADG;AAEnBE,sBAAM9B,MAAM8B,IAFO;AAGnBX,sBAAMnB,MAAMmB,IAHO;AAInBgB,uBAAO,KAAK5D,OAAL,CAAa4D,KAJD;AAKnB1E,4BAAY,KAAKc,OAAL,CAAad;AALN,aAAvB;;AAQA,gBAAIuC,MAAMoC,EAAV,EAAc;AACV,oBAAI,CAAC,KAAK7D,OAAL,CAAaX,QAAlB,EAA4B;AACxByE,4BAAQC,IAAR,CAAapD,gBAAM+B,KAAN,CAAY/B,gBAAMgC,QAAN,eAA2BlB,MAAM4B,OAAjC,qCAAZ,CAAb;;AAEA,2BAAO,kBAAQxB,OAAR,EAAP;AACH;;AAED,uBAAO,KAAKmC,YAAL,CAAkBvC,MAAMoC,EAAxB,EAA4BV,cAA5B,CAAP;AACH;;AAED,mBAAO,KAAKc,cAAL,CAAoBd,cAApB,CAAP;AACH;;AAED;;;;;;;;;;;;;;;yCAYiBe,O,EAAS;AAAA,gBACdpF,IADc,GACL,KAAKkB,OADA,CACdlB,IADc;;;AAGtB,gBAAIA,KAAK4B,OAAL,CAAa,KAAb,KAAuB,CAA3B,EAA8B;AAC1B,uBAAOwD,OAAP;AACH;;AAED,gBAAI,CAACA,OAAD,IAAY,CAACA,QAAQjC,MAArB,IAA+B,CAACnD,KAAKmD,MAAzC,EAAiD;AAC7C,uBAAO,KAAP;AACH;;AAED,gBAAMkC,eAAe,GAAGC,MAAH,CAAUtF,IAAV,CAArB;;AAEA,mBAAOoF,QAAQG,MAAR,CAAe,iBAAWC,KAAX,EAAqB;AAAA,oBAAlBf,IAAkB,SAAlBA,IAAkB;;AACvC,oBAAMgB,gBAAgBJ,aAAaK,QAAb,CAAsBjB,IAAtB,CAAtB;;AAEA,oBAAIgB,iBAAiBJ,aAAalC,MAAb,KAAwB,CAAzC,IAA8CiC,QAAQI,QAAQ,CAAhB,CAAlD,EAAsE;AAClEH,iCAAaM,IAAb,CAAkBP,QAAQI,QAAQ,CAAhB,EAAmBf,IAArC;AACH;AACD,uBAAOgB,aAAP;AACH,aAPM,EAOJG,KAPI,CAOE,CAPF,EAOK,CAPL,CAAP;AAQH;;AAED;;;;;;;;;;;kCAQU1E,O,EAAS;AACf,mBAAO,KAAKG,IAAL,CAAUwE,QAAV,CAAmB,KAAnB,cAAoC,KAAKxE,IAAL,CAAUyE,UAA9C,YAAiE5E,OAAjE,CAAP;AACH;;AAED;;;;;;;;;;;;;;;mHAWmBgC,Q;;;oBAAU6C,I,uEAAO,C;oBAAGvE,K,uEAAQ,KAAKN,OAAL,CAAaM,K;;;;;;;;;uCACR,KAAKwE,SAAL,CAAe;AAC3DC,8CAAUzE,KADiD;AAE3DuE;AAF2D,iCAAf,C;;;;AAA7BG,oC,SAAXC,O,CAAWD,I;AAAclG,oC,SAANwE,I;;oCAKtBxE,KAAKmD,M;;;;;sCACAtB,gBAAMC,GAAN,CAAU,2EAAV,C;;;AAGJsE,4C,GAAe,CAAC,KAAKC,gBAAL,CAAsBrG,IAAtB,KAA+B,CAACA,KAAK,CAAL,CAAD,EAAUA,KAAK,CAAL,CAAV,CAAhC,EAChBuF,MADgB,CACTe,OADS,EAEhBf,MAFgB,CAET;AAAA,wCAAGd,IAAH,UAAGA,IAAH;AAAA,2CAAc,OAAKvD,OAAL,CAAaO,cAAb,CAA4B8E,KAA5B,CAAkC;AAAA,+CAAa,CAAC9B,KAAK+B,KAAL,CAAWC,SAAX,CAAd;AAAA,qCAAlC,CAAd;AAAA,iCAFS,EAGhBC,GAHgB,CAGZ,eAAO;AACR,wCAAMC,aAAazD,WAAWA,SAASqC,MAAT,CAAgB;AAAA,+CAAWhB,QAAQM,QAAR,KAAqB+B,IAAInC,IAApC;AAAA,qCAAhB,EAA0D,CAA1D,CAAX,GAA0E,KAA7F;AACA,wCAAML,YAAYuC,aAAaA,WAAW5B,EAAxB,GAA6B,IAA/C;;AAEA,2CAAO;AACH6B,6CAAKA,GADF;AAEHxC,mDAAWA;AAFR,qCAAP;AAIH,iCAXgB,C;AAYfyC,0C,GAAa,KAAKC,YAAL,CAAkBZ,IAAlB,C;;sCAEf,CAAC,KAAKhF,OAAL,CAAalB,IAAb,CAAkB4B,OAAlB,CAA0B,KAA1B,KAAoC,CAApC,IAAyCwE,aAAajD,MAAb,GAAsB,CAAhE,KAAsE0D,UAAtE,IAAoF,CAACd,IAAD,GAAQc,U;;;;;kEACrF,KAAKE,YAAL,CAAkB7D,QAAlB,EAA4B6C,OAAO,CAAnC,EAAsCnD,IAAtC,CAA2C;AAAA,2CAAYoE,SAAS1B,MAAT,CAAgBc,YAAhB,CAAZ;AAAA,iCAA3C,C;;;kEAGJA,Y;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;qCAUapG,I,EAAM;AAAA;;AACf,mBAAOA,KAAK0G,GAAL;AAAA,sGAAS,kBAAME,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC0B,OAAKvF,IAAL,CAAU4F,SAAV,CAAoBL,IAAIA,GAAJ,CAAQM,MAAR,CAAeC,GAAnC,CAD1B;;AAAA;AAAA;AACIC,6CADJ,UACJ5C,IADI,CACI4C,SADJ;AAAA,sEAGL;AACHrC,4CAAI6B,IAAIxC,SADL;AAEHK,8CAAMmC,IAAIA,GAAJ,CAAQnC,IAFX;AAGH4C,8CAAMD,UAAUC;AAHb,qCAHK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAT;;AAAA;AAAA;AAAA;AAAA,gBAAP;AASH;;AAED;;;;;;;;;;;sCAQcnG,O,EAAS;AACnB,mBAAO,KAAKG,IAAL,CAAUwE,QAAV,CAAmB,KAAnB,cAAoC,KAAKxE,IAAL,CAAUyE,UAA9C,gBAAqE5E,OAArE,CAAP;AACH;;AAED;;;;;;;;;;;;;;oHAU6BoG,K;oBAAOvB,I,uEAAO,C;oBAAGvE,K,uEAAQ,G;;;;;;;uCAC5B,KAAKH,IAAL,CAAUkG,gBAAV,CAA2B;AAC7CC,2CAAO,QADsC;AAE7CC,0CAAM,SAFuC;AAG7CC,+CAAW,MAHkC;AAI7CzB,8CAAUzE,KAJmC;AAK7CuE;AAL6C,iCAA3B,C;;;AAAhB4B,uC;AAQazB,oC,GAAsByB,O,CAAjCxB,O,CAAWD,I,EAAc0B,G,GAAQD,O,CAAdnD,I;AACrBqC,0C,GAAa,KAAKC,YAAL,CAAkBZ,IAAlB,C;AACb2B,yC,GAAYD,IAAIrC,MAAJ,CAAW;AAAA,2CAAMuC,GAAGC,SAAT;AAAA,iCAAX,C;;sCACdH,IAAIzE,MAAJ,GAAa,CAAb,IAAkBmE,QAAQM,IAAIA,IAAIzE,MAAJ,GAAa,CAAjB,EAAoB6E,UAA9C,IACAnB,UADA,IACc,CAACd,IAAD,GAAQc,U;;;;;kEACf,KAAKoB,sBAAL,CAA4BX,KAA5B,EAAmCvB,OAAO,CAA1C,EAA6CnD,IAA7C,CAAkD;AAAA,2CAAcsF,WAAW5C,MAAX,CAAkBuC,SAAlB,CAAd;AAAA,iCAAlD,C;;;kEAGJA,S;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;qCAUa3B,I,EAAM;AACf,gBAAMiC,YAAY7B,QAAQJ,IAAR,KAAiBA,KAAKM,KAAL,CAAW,yBAAX,CAAnC;;AAEA,mBAAO2B,aAAa,CAACA,UAAU,CAAV,CAArB;AACH;;AAED;;;;;;;;;;;;;oBAQuBpC,I,uEAAO,C;oBAAGvE,K,uEAAQ,KAAKN,OAAL,CAAaM,K;;;;;;;;AAC5CuC,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,EAAiB,8BAAjB,C;;uCACqC,KAAKoE,aAAL,CAAmB;AACnEnC,8CAAUzE,KADyD;AAEnEuE;AAFmE,iCAAnB,C;;;;AAAjCG,oC,UAAXC,O,CAAWD,I;AAAchD,wC,UAANsB,I;AAKrBqC,0C,GAAa,KAAKC,YAAL,CAAkBZ,IAAlB,C;;sCAEf,KAAKhF,OAAL,CAAalB,IAAb,CAAkB4B,OAAlB,CAA0B,KAA1B,KAAoC,CAApC,IAAyCiF,UAAzC,IAAuD,CAACd,IAAD,GAAQc,U;;;;;kEACxD,KAAK5D,gBAAL,CAAsB8C,OAAO,CAA7B,EAAgCnD,IAAhC,CAAqC;AAAA,2CAAgByF,aAAa/C,MAAb,CAAoBpC,QAApB,CAAhB;AAAA,iCAArC,C;;;;AAGXa,4DAA0Bb,SAASC,MAAnC;;kEAEOD,Q;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;0CAWkBA,Q,EAAU;AAAA,gBAChBhD,QADgB,GACH,KAAKgB,OADF,CAChBhB,QADgB;;;AAGxB,mBAAOgD,SAASwD,GAAT,CAAa;AAAA,uBAAW,wBAAS;AACpCnC,6BAASA,QAAQE,IADmB;AAEpC4C,0BAAM3F,gBAAM4G,UAAN,CAAiB,IAAIC,IAAJ,CAAShE,QAAQiE,YAAjB,CAAjB,CAF8B;AAGpC1E,0BAAMS,QAAQT;AAHsB,iBAAT,EAI5B5D,SAASqE,OAJmB,CAAX;AAAA,aAAb,EAIekE,IAJf,CAIoBvI,SAASwI,gBAJ7B,CAAP;AAKH;;AAED;;;;;;;;;;AAUA;;;;iDAC2E;AAAA,gBAAxDvB,GAAwD,UAAxDA,GAAwD;AAAA,gBAAnDxC,QAAmD,UAAnDA,QAAmD;AAAA,uCAAzCuC,MAAyC;AAAA,gBAArBzC,IAAqB,iBAA/BkE,MAA+B,CAArBlE,IAAqB;AAAA,gBAAbmE,OAAa,iBAAbA,OAAa;;AACvE,mBAAO,wBAAS;AACZzB,wBADY;AAEZyB,yBAASA,QAAQC,KAAR,CAAc,IAAd,EAAoB,CAApB,CAFG;AAGZC,qBAAKnE,QAHO;AAIZgE,wBAAQlE;AAJI,aAAT,EAKJ,KAAKvD,OAAL,CAAahB,QAAb,CAAsBgH,MALlB,CAAP;AAMH;;AAED;;;;;;;;;;;;;wCAUgB6B,K,EAAO;AAAA;;AACnB,gBAAMC,SAAS,oBAAWD,MAAMC,MAAjB,CAAf;;AAEA,gBAAI,CAACA,OAAO7F,MAAR,IAAkB,KAAKjC,OAAL,CAAahB,QAAb,CAAsB+I,OAA5C,EAAqD;AACjDD,uBAAOrD,IAAP,CAAY,EAAClB,MAAM,KAAKvD,OAAL,CAAahB,QAAb,CAAsB+I,OAA7B,EAAZ;AACH;;AAED,mBAAOD,OACFzD,MADE,CACK;AAAA,uBAAS,OAAKrE,OAAL,CAAaT,YAAb,CAA0BmB,OAA1B,CAAkCsH,MAAMzE,IAAxC,MAAkD,CAAC,CAA5D;AAAA,aADL,EAEFiC,GAFE,CAEE;AAAA,uBAAS,wBAAS;AACnBwC,2BAAOA,MAAMzE;AADM,iBAAT,EAEX,OAAKvD,OAAL,CAAahB,QAAb,CAAsBgJ,KAFX,CAAT;AAAA,aAFF,EAI8BT,IAJ9B,CAImC,EAJnC,CAAP;AAKH;;AAED;;;;;;;;;;;;;uCAUeM,K,EAAO;AAClB,mBAAO,wBAAS;AACZC,wBAAQ,KAAKG,eAAL,CAAqBJ,KAArB,CADI;AAEZtE,sBAAMsE,MAAMK,KAFA;AAGZC,sBAAM,MAAMN,MAAMO,MAHN;AAIZR,qBAAKC,MAAMpE;AAJC,aAAT,EAKJ,KAAKzD,OAAL,CAAahB,QAAb,CAAsB6I,KALlB,CAAP;AAMH;;AAED;;;;;;;;;;;;;sCAUcjF,I,EAAMyF,S,EAAW;AAC3B,gBAAIC,MAAMC,OAAN,CAAc3F,IAAd,KAAuBA,KAAKX,MAAhC,EAAwC;AACpC,uBAAOW,KAAK2E,IAAL,CAAU,IAAV,IAAkB,IAAzB;AACH;;AAED,gBAAIc,SAAJ,EAAe;AACX,uBAAUA,SAAV;AACH;;AAED,mBAAO,oCAAP;AACH;;AAED;;;;;;;;;;;;;;;;wCAagBG,M,EAAQ;AAAA;;AACpB,mBAAO,uBAAeA,MAAf,EAAuBhD,GAAvB,CAA2B,kBAAkB;AAAA;AAAA,oBAAhBiD,GAAgB;AAAA,oBAAXC,KAAW;;AAChD,oBAAMC,UAAU,wBAAS;AACrBA,6BAASF;AADY,iBAAT,EAEb,OAAKzI,OAAL,CAAahB,QAAb,CAAsB4J,KAFT,CAAhB;AAGA,oBAAMhG,OAAO8F,MAAMnB,IAAN,CAAW,IAAX,CAAb;;AAEA,uBAAOoB,UAAU,IAAV,GAAiB/F,IAAxB;AACH,aAPM,CAAP;AAQH;;AAED;;;;;;;;;;;;;8CAUuC;AAAA,gBAAb8E,OAAa,UAAvB1B,MAAuB,CAAb0B,OAAa;;AACnC,gBAAMmB,cAAc,KAAK7I,OAAL,CAAa8I,eAAjC;AACA,gBAAMC,YAAY;AACdC,wBAAQ;AAAA,2BAAWtB,QAAQpC,KAAR,CAAc,SAAd,CAAX;AAAA,iBADM;AAEd2D,yBAAS;AAAA,2BAAW,CAACvB,QAAQpC,KAAR,CAAc,SAAd,CAAZ;AAAA,iBAFK;AAGd4D,qBAAK;AAAA,2BAAM,IAAN;AAAA;AAHS,aAAlB;AAKA,gBAAMC,sBAAsB,KAAKnJ,OAAL,CAAaP,iBAAb,CAA+B4F,KAA/B,CAAqC,yBAAiB;AAC9E,oBAAM+D,QAAQ,IAAIC,MAAJ,CAAWC,aAAX,EAA0B,GAA1B,CAAd;AACA,uBAAO,CAAC5B,QAAQC,KAAR,CAAc,IAAd,EAAoB,CAApB,EAAuBrC,KAAvB,CAA6B8D,KAA7B,CAAR;AACH,aAH2B,CAA5B;;AAKA,gBAAIL,UAAUF,WAAV,CAAJ,EAA4B;AACxB,uBAAOE,UAAUF,WAAV,EAAuBnB,OAAvB,KAAmCyB,mBAA1C;AACH;;AAED,mBAAOJ,UAAUE,OAAV,CAAkBvB,OAAlB,KAA8ByB,mBAArC;AACH;;AAED;;;;;;;;;;;;;+CAUmC;AAAA,gBAAdF,OAAc,uEAAJ,EAAI;;AAC/B,gBAAMM,eAAe,oBAAWN,OAAX,CAArB;;AAEA,gBAAIM,aAAatH,MAAb,KAAwB,CAA5B,EAA+B;AAC3BsH,6BAAa9E,IAAb,CAAkB,IAAlB;AACH;;AAED,mBAAO8E,aACF7E,KADE,CACI,CADJ,EACO,CAAC,CADR,EAEFL,MAFE,CAEK,KAAKmF,aAAL,CAAmB5H,IAAnB,CAAwB,IAAxB,CAFL,EAGF4D,GAHE,CAGE,KAAKiE,gBAAL,CAAsB7H,IAAtB,CAA2B,IAA3B,CAHF,EAIF2F,IAJE,CAIG,IAJH,CAAP;AAKH;;AAED;;;;;;;;;;;;;;;oHAW4BnB,K,EAAOsD,K;;;;;;;AACzB1J,uC,GAAU;AACZoG,2CAAOA,KADK;AAEZsD,2CAAOA,KAFK;AAGZ3E,8CAAU;AAHE,iC;;uCAMO,KAAK5E,IAAL,CAAUwJ,WAAV,CAAsB3J,OAAtB,C;;;;AAAfsD,oC,UAAAA,I;kEAEDA,I;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;qHAUuBsG,a;;;;;;;;AACbC,wC,GAAW,uC;AACXhH,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,EAAiB+G,QAAjB,C;;uCAEM,kBAAQX,GAAR,CACjBU,cACKpE,GADL;AAAA,0HACS,mBAAMsE,KAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8FAC0CA,KAD1C,MACc1D,KADd,aACQD,IADR,EAC+BuD,KAD/B,aACyBvD,IADzB;;;AAGD,+DAAKlG,KAAL,CAAW4J,QAAX,EAAqB1B,IAArB,4BAAmD3H,gBAAM4G,UAAN,CAAiB,IAAIC,IAAJ,CAASjB,KAAT,CAAjB,CAAnD,aAA4F5F,gBAAM4G,UAAN,CAAiB,IAAIC,IAAJ,CAASqC,KAAT,CAAjB,CAA5F;AAHC;AAAA,+DAIqB,OAAKK,qBAAL,CAA2BD,MAAM,CAAN,EAAS3D,IAApC,EAA0C2D,MAAM,CAAN,EAAS3D,IAAnD,CAJrB;;AAAA;AAIK8C,+DAJL;AAAA,2FAMM;AACHpF,gEAAIiG,MAAM,CAAN,EAASjG,EADV;AAEHN,kEAAM,OAAKvD,OAAL,CAAajB,MAAb,GAAsB+K,MAAM,CAAN,EAASvG,IAFlC;AAGHF,qEAASyG,MAAM,CAAN,EAASvG,IAHf;AAIH+D,0EAAcwC,MAAM,CAAN,EAAS3D,IAJpB;AAKHvD,kEAAM,OAAKoH,oBAAL,CAA0Bf,OAA1B,IAAqC;AALxC,yDANN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADT;;AAAA;AAAA;AAAA;AAAA,oCADiB,C;;;AAAfgB,sC;;;AAkBNpH,kEAAgCoH,OAAOhI,MAAvC;;mEAEOgI,M;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;;0CAakBnC,M,EAAQ;AACtB,gBAAI,CAACA,MAAD,IAAW,CAACQ,MAAMC,OAAN,CAAcT,MAAd,CAAhB,EAAuC;AACnC,uBAAO,KAAP;AACH;;AAHqB,gBAKdtI,gBALc,GAKO,KAAKQ,OALZ,CAKdR,gBALc;;;AAOtB,mBAAOA,iBAAiB0K,IAAjB,CAAsB;AAAA,uBAASpC,OAAOtC,GAAP,CAAW;AAAA,wBAAGjC,IAAH,UAAGA,IAAH;AAAA,2BAAcA,IAAd;AAAA,iBAAX,EAA+BiB,QAA/B,CAAwCwD,KAAxC,CAAT;AAAA,aAAtB,CAAP;AACH;;AAED;;;;;;;;;;;;;;qHAUuB4B,a;;;;;;;AACbO,oC,GAAO;AACTlJ,4CAAQ,QADC;AAETmJ,gDAAY;AAFH,kCAGX,KAAKpK,OAAL,CAAaqK,UAHF,C;AAIPxH,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,0BAAuCqH,IAAvC,C;;uCACgB,KAAKlJ,MAAL,CAAYqJ,UAAZ,CAAuB;AAClDhE,2CAAO,QAD2C;AAElDF,2CAAOwD,cAAcA,cAAc3H,MAAd,GAAuB,CAArC,EAAwC,CAAxC,EAA2CkE;AAFA,iCAAvB,C;;;;AAAjBlF,sC,UAANqC,I;;;AAKRT,uCAAUsH,IAAV,gBAAyBlJ,OAAOgB,MAAhC;;mEAEOhB,M;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;sCAUcA,M,EAAQ;AAAA;;AAClB,gBAAMuH,SAAS,EAAf;;AAEA,kCAAc,gCAAa,EAAb,EAAiBvH,MAAjB,CAAd,EAAwCsJ,OAAxC,CAAgD,iBAAS;AACrD,oBAAI,CAAC1C,MAAMC,MAAN,CAAa7F,MAAlB,EAA0B;AACtB,wBAAI,CAAC,OAAKjC,OAAL,CAAahB,QAAb,CAAsB+I,OAA3B,EAAoC;AAChC;AACH;;AAEDF,0BAAMC,MAAN,CAAarD,IAAb,CAAkB,EAAClB,MAAM,OAAKvD,OAAL,CAAahB,QAAb,CAAsB+I,OAA7B,EAAlB;AACH;;AAED,oBAAMyC,YAAY3C,MAAMC,MAAN,CAAa,CAAb,EAAgBvE,IAAlC;;AAEA,oBAAI,CAACiF,OAAOgC,SAAP,CAAL,EAAwB;AACpBhC,2BAAOgC,SAAP,IAAoB,EAApB;AACH;;AAEDhC,uBAAOgC,SAAP,EAAkB/F,IAAlB,CAAuB,OAAKgG,cAAL,CAAoB5C,KAApB,CAAvB;AACH,aAhBD;;AAkBA,mBAAO,KAAK6C,eAAL,CAAqBlK,gBAAMmK,UAAN,CAAiBnC,MAAjB,CAArB,CAAP;AACH;;AAED;;;;;;;;;;;;;iCAUSoC,Y,EAAc;AAAA;;AAAA,gBACXlL,OADW,GACC,KAAKM,OADN,CACXN,OADW;;AAEnB,gBAAMuB,SAAS,sBAAc,gCAAa,EAAb,EAAiB2J,YAAjB,CAAd,CAAf;;AAEA,gBAAI,CAAClL,OAAD,IAAYA,YAAY,OAA5B,EAAqC;AACjC,uBAAOuB,OAAOuE,GAAP,CAAW,KAAKiF,cAAL,CAAoB7I,IAApB,CAAyB,IAAzB,CAAX,CAAP;AACH;;AAED,gBAAIlC,YAAY,OAAhB,EAAyB;AACrB,uBAAO,KAAKmL,aAAL,CAAmB5J,MAAnB,CAAP;AACH;;AAED,gBAAI,QAAOvB,OAAP,uDAAOA,OAAP,OAAmB,QAAnB,IAA+B4I,MAAMC,OAAN,CAAc7I,OAAd,CAAnC,EAA2D;AACvD,sBAAMiB,gBAAMC,GAAN,CAAU,mEAAV,CAAN;AACH;;AAED,gBAAMkK,YAAY,sBAAcpL,OAAd,EAAuB6B,MAAvB,CAA8B,UAACC,KAAD,EAAQoH,KAAR;AAAA,uBAAkBpH,MAAM4C,MAAN,CAAawE,KAAb,CAAlB;AAAA,aAA9B,EAAqE,EAArE,CAAlB;AACA,gBAAMJ,SAAS,oBAAY9I,OAAZ,EAAqB6B,MAArB,CAA4B,UAACC,KAAD,EAAQoH,KAAR,EAAemC,CAAf,EAAkBC,GAAlB,EAA0B;AACjE,oBAAMC,cAAchK,OAAOoD,MAAP,CAAc,iBAAS;AACvC,wBAAI,CAACwD,MAAMC,MAAN,CAAa7F,MAAd,IAAwB,OAAKjC,OAAL,CAAahB,QAAb,CAAsB+I,OAAlD,EAA2D;AACvDF,8BAAMC,MAAN,CAAarD,IAAb,CAAkB,EAAClB,MAAM,OAAKvD,OAAL,CAAahB,QAAb,CAAsB+I,OAA7B,EAAlB;AACH;;AAED,2BAAOF,MAAMC,MAAN,CAAaoC,IAAb,CAAkB,iBAAS;AAC9B,4BAAMgB,eAAexL,QAAQkJ,KAAR,EAAelI,OAAf,CAAuB,KAAvB,MAAkC,CAAC,CAAnC,IAAwCoK,UAAUpK,OAAV,CAAkBsH,MAAMzE,IAAxB,MAAkC,CAAC,CAAhG;;AAEA,+BAAO7D,QAAQkJ,KAAR,EAAelI,OAAf,CAAuBsH,MAAMzE,IAA7B,MAAuC,CAAC,CAAxC,IAA6C2H,YAApD;AACH,qBAJM,KAID,CAACF,IAAI3G,MAAJ,CAAW;AAAA,+BAAS7C,MAAM0G,KAAN,CAAT;AAAA,qBAAX,EAAkCgC,IAAlC,CAAuC;AAAA,+BAAS1I,MAAM0G,KAAN,EAAaxH,OAAb,CAAqB,OAAK+J,cAAL,CAAoB5C,KAApB,CAArB,MAAqD,CAAC,CAA/D;AAAA,qBAAvC,CAJP;AAKH,iBAVmB,EAUjBrC,GAViB,CAUb,OAAKiF,cAAL,CAAoB7I,IAApB,CAAyB,MAAzB,CAVa,CAApB;;AAYA,oBAAIqJ,YAAYhJ,MAAhB,EAAwB;AACpBT,0BAAMoH,KAAN,IAAeqC,WAAf;AACH;;AAED,uBAAOzJ,KAAP;AACH,aAlBc,EAkBZ,EAlBY,CAAf;;AAoBA,mBAAO,KAAKkJ,eAAL,CAAqBlC,MAArB,CAAP;AACH;;AAED;;;;;;;;;;;;;qCAUaX,K,EAAO;AAAA,gBACRwC,UADQ,GACO,KAAKrK,OADZ,CACRqK,UADQ;;;AAGhB,mBAAO,CAACxC,MAAMsD,YAAN,GAAqBd,eAAe,KAApC,GAA4CA,eAAe,QAAf,GAA0BA,eAAe,YAAtF,KAAuG,CAAC,KAAKe,iBAAL,CAAuBvD,MAAMC,MAA7B,CAAxG,IACH,EAAE,CAAC,KAAK9H,OAAL,CAAaqL,cAAb,IAA+BhB,eAAe,YAA/C,KAAgE,CAACxC,MAAMyD,SAAzE,CADJ;AAEH;;AAED;;;;;;;;;;;2CAQmBC,W,EAAa;AAC5B,mBAAO,CAAC,KAAKH,iBAAL,CAAuBG,YAAYzD,MAAnC,CAAD,IAA+C,EAAE,KAAK9H,OAAL,CAAaqL,cAAb,IAA+B,CAACE,YAAYD,SAA9C,CAAtD;AACH;;AAED;;;;;;;;;;;;;;;0CAYkBxB,K,EAAOjC,K,EAAO;AAC5B,gBAAI,KAAK7H,OAAL,CAAaqK,UAAb,KAA4B,YAAhC,EAA8C;AAC1C,uBAAO,KAAKrK,OAAL,CAAaL,cAAb,CAA4B6L,OAA5B,CAAoC,cAApC,EAAoD1B,MAAM,CAAN,EAASvG,IAA7D,MAAuEsE,MAAMyD,SAAN,CAAgBpD,KAA9F;AACH;;AAED,mBAAO1H,gBAAMiL,SAAN,CACHpE,KAAKqE,KAAL,CAAW7D,MAAM8D,SAAjB,CADG,EAEHtE,KAAKqE,KAAL,CAAW5B,MAAM,CAAN,EAAS3D,IAApB,CAFG,EAGHkB,KAAKqE,KAAL,CAAW5B,MAAM,CAAN,EAAS3D,IAApB,CAHG,CAAP;AAKH;;AAED;;;;;;;;;;;;;;gDAWwB2D,K,EAAOyB,W,EAAa;AACxC,gBAAI,KAAKvL,OAAL,CAAaqK,UAAb,KAA4B,YAAhC,EAA8C;AAC1C,uBAAO,KAAKrK,OAAL,CAAaL,cAAb,CAA4B6L,OAA5B,CAAoC,cAApC,EAAoD1B,MAAM,CAAN,EAASvG,IAA7D,MAAuEgI,YAAYD,SAAZ,CAAsBpD,KAApG;AACH;;AAED,mBAAO1H,gBAAMiL,SAAN,CACHpE,KAAKqE,KAAL,CAAWH,YAAY1E,SAAvB,CADG,EAEHQ,KAAKqE,KAAL,CAAW5B,MAAM,CAAN,EAAS3D,IAApB,CAFG,EAGHkB,KAAKqE,KAAL,CAAW5B,MAAM,CAAN,EAAS3D,IAApB,CAHG,CAAP;AAKH;;AAED;;;;;;;;;;;;;;qHAUsByD,a;;;;;;;;;uCACG,KAAKgC,gBAAL,CAAsBhC,aAAtB,C;;;AAAf3I,sC;AACAoC,uC,GAAUuG,cACXpE,GADW,CACP,iBAAS;AACV,wCAAMqG,iBAAiB,oBAAW5K,MAAX,EAClBoD,MADkB,CACX,OAAKyH,YAAL,CAAkBlK,IAAlB,CAAuB,MAAvB,CADW,EAElByC,MAFkB,CAEX,OAAK0H,iBAAL,CAAuBnK,IAAvB,CAA4B,MAA5B,EAAkCkI,KAAlC,CAFW,CAAvB;AAGA,wCAAMlH,OAAO,CAAC,CAACkH,MAAM,CAAN,EAASlH,IAAV,IAAkB,OAAK5C,OAAL,CAAaX,QAAhC,KAA6C,OAAK2M,QAAL,CAAcH,cAAd,CAA1D;AACA,2CAAO;AACHhI,4CAAIiG,MAAM,CAAN,EAASjG,EADV;AAEHR,iDAASyG,MAAM,CAAN,EAASvG,IAFf;AAGHA,8CAAM,OAAKvD,OAAL,CAAajB,MAAb,GAAsB+K,MAAM,CAAN,EAASvG,IAHlC;AAIH+D,sDAAcwC,MAAM,CAAN,EAAS3D,IAJpB;AAKHvD,8CAAM,OAAKqJ,aAAL,CAAmBrJ,IAAnB,EAAyBkH,MAAM,CAAN,EAASlH,IAAlC;AALH,qCAAP;AAOH,iCAbW,C;mEAeTS,O;;;;;;;;;;;;;;;;AAEX;;;;;;;;;;;;;qHAS6BuG,a;;;;;;;;AACnB/G,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,qC;AACTsD,qC,GAAQwD,cAAcA,cAAc3H,MAAd,GAAuB,CAArC,EAAwC,CAAxC,EAA2CkE,I;;uCACvC,KAAKY,sBAAL,CAA4BX,KAA5B,C;;;AAAZM,mC;AAEFwF,wC,GAAW,C;AACT7I,uC,GAAUuG,cACXpE,GADW,CACP,iBAAS;AACV,wCAAM2G,uBAAuB,oBAAWzF,GAAX,EACxBrC,MADwB,CACjB,QAAK+H,kBAAL,CAAwBxK,IAAxB,CAA6B,OAA7B,CADiB,EAExByC,MAFwB,CAEjB,QAAKgI,uBAAL,CAA6BzK,IAA7B,CAAkC,OAAlC,EAAwCkI,KAAxC,CAFiB,CAA7B;AAGAoC,gDAAYC,qBAAqBlK,MAAjC;AACA,wCAAMW,OAAO,CAAC,CAACkH,MAAM,CAAN,EAASlH,IAAV,IAAkB,QAAK5C,OAAL,CAAaX,QAAhC,KAA6C,QAAK2M,QAAL,CAAcG,oBAAd,CAA1D;AACA,2CAAO;AACHtI,4CAAIiG,MAAM,CAAN,EAASjG,EADV;AAEHR,iDAASyG,MAAM,CAAN,EAASvG,IAFf;AAGHA,8CAAM,QAAKvD,OAAL,CAAajB,MAAb,GAAsB+K,MAAM,CAAN,EAASvG,IAHlC;AAIH+D,sDAAcwC,MAAM,CAAN,EAAS3D,IAJpB;AAKHvD,8CAAM,QAAKqJ,aAAL,CAAmBrJ,IAAnB,EAAyBkH,MAAM,CAAN,EAASlH,IAAlC;AALH,qCAAP;AAOH,iCAdW,C;;AAehBC,iEAA+BqJ,QAA/B;mEACO7I,O;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;4CAUoBiJ,Y,EAAc;AAC9B,mBAAO,oBAAWA,YAAX,EAAyB/F,IAAzB,CAA8B,UAACgG,QAAD,EAAWC,QAAX;AAAA,uBAAwB,IAAInF,IAAJ,CAASmF,SAASrG,IAAlB,IAA0B,IAAIkB,IAAJ,CAASkF,SAASpG,IAAlB,CAAlD;AAAA,aAA9B,CAAP;AACH;;AAED;;;;;;;;;;;;;6CAUqBmG,Y,EAAc;AAC/B,gBAAMrC,SAAS,EAAf;AACA,gBAAMH,QAAQ,CAAd;AACA,gBAAM2C,qBAAqB,KAAKC,mBAAL,CAAyBJ,YAAzB,CAA3B;;AAEA,gBAAIG,mBAAmBxK,MAAnB,KAA8B,CAA9B,IAAmC,KAAKjC,OAAL,CAAalB,IAAb,CAAkB4B,OAAlB,CAA0B,KAA1B,KAAoC,CAA3E,EAA8E;AAC1E+L,mCAAmBhI,IAAnB,CAAwB;AACpBZ,wBAAI,CADgB;AAEpBsC,0BAAM,IAAIkB,IAAJ,CAAS,CAAT;AAFc,iBAAxB;AAIH;;AAED,iBAAK,IAAI0D,IAAI,CAAb,EAAgBA,IAAI0B,mBAAmBxK,MAAnB,GAA4B,CAAhD,EAAmD8I,GAAnD,EAAwD;AACpDd,uBAAOxF,IAAP,CAAYgI,mBAAmB/H,KAAnB,CAAyBqG,CAAzB,EAA4BA,IAAIjB,KAAhC,CAAZ;AACH;;AAED,mBAAOG,MAAP;AACH;;AAED;;;;;;;;;;;;;;;;AAOUpH,sC,GAASrC,gBAAMsC,IAAN,CAAW,IAAX,EAAiB,kBAAjB,C;AACTuH,0C,GAAa;AACfpJ,4CAAQ,KAAK0L,eAAL,CAAqB/K,IAArB,CAA0B,IAA1B,CADO;AAEfqH,6CAAS,KAAK2D,gBAAL,CAAsBhL,IAAtB,CAA2B,IAA3B,CAFM;AAGfwI,gDAAY,KAAKuC,eAAL,CAAqB/K,IAArB,CAA0B,IAA1B,CAHG;AAIf8E,yCAAK,KAAKmG,sBAAL,CAA4BjL,IAA5B,CAAiC,IAAjC;AAJU,iC;;uCAMI,KAAKG,gBAAL,E;;;AAAjBC,wC;;AACN,qCAAK/B,KAAL,CAAW,kBAAX,EAA+BkI,IAA/B,GAAsC,cAAtC;;;uCAEmB,KAAKtC,YAAL,CAAkB7D,SAASC,MAAT,GAAkBD,QAAlB,GAA6B,KAA/C,C;;;AAAblD,oC;;AACN,qCAAKgO,2BAAL,CAAiChO,IAAjC,EAAuC,KAAKkB,OAAL,CAAalB,IAApD;;uCAC2B,kBAAQoK,GAAR,CAAY,KAAK6D,YAAL,CAAkBjO,IAAlB,CAAZ,C;;;AAArBwN,4C;;;AAENzJ,wDAAsB/D,KAAK0G,GAAL,CAAS;AAAA,wCAAUjC,IAAV,UAAGmC,GAAH,CAAUnC,IAAV;AAAA,2CAAuBA,IAAvB;AAAA,iCAAT,EAAsCgE,IAAtC,CAA2C,IAA3C,CAAtB;;mEAEO8C,WAAW,KAAKrK,OAAL,CAAaqK,UAAxB,EACH,KAAK2C,oBAAL,CAA0BV,YAA1B,CADG,C;;;;;;;;;;;;;;;;;AAKX;;;;;;;;;;;;oDAS4BxN,I,EAAMmO,W,EAAa;AAC3C,gBAAIA,YAAYvM,OAAZ,CAAoB,KAApB,KAA8B,CAA9B,IAAmC,EAAEuM,uBAAuB3E,KAAzB,CAAvC,EAAwE;;AAExE,gBAAM4E,YAAYpO,KAAK0G,GAAL,CAAS;AAAA,uBAAW2H,QAAQzH,GAAR,CAAYnC,IAAvB;AAAA,aAAT,CAAlB;;AAEA,gBAAM6J,cAAcH,YAAY5I,MAAZ,CAAmB;AAAA,uBAAc6I,UAAUxM,OAAV,CAAkB2M,UAAlB,IAAgC,CAA9C;AAAA,aAAnB,CAApB;AACA,gBAAID,YAAYnL,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,oBAAMqL,aAAcF,YAAYnL,MAAZ,KAAuB,CAAxB,GAA6B,QAA7B,GAAwC,UAA3D;AACA,sBAAMtB,gBAAMC,GAAN,CAAU,qBAAmB0M,UAAnB,sCAA8DF,WAA9D,UACZ,+BADE,CAAN;AAEH;AACJ;;AAED;;;;;;;;;;;sCAQc;AACV,mBAAO,sBAAY,mBAAW;AAC1B,4CAAa,oBAAY;AACrB,wBAAI,CAACG,QAAL,EAAe;AACXzJ,gCAAQC,IAAR,CAAapD,gBAAM6M,MAAN,CAAa,2DAAb,CAAb;AACH;;AAED3L,4BAAQ0L,QAAR;AACH,iBAND;AAOH,aARM,CAAP;AASH;;AAED;;;;;;;;uCAKevN,O,EAAS;AACpB,gBAAMyN,oBAAoB,SAApBA,iBAAoB;AAAA,uBAAS/E,MAAM8C,OAAN,CAAc,UAAd,EAA0B,KAA1B,EAAiCkC,WAAjC,GAA+ClC,OAA/C,CAAuD,IAAvD,EAA6D;AAAA,2BAAKmC,EAAEC,WAAF,EAAL;AAAA,iBAA7D,CAAT;AAAA,aAA1B;AACA,gBAAMC,UAAU,uBAAe7N,OAAf,EACXqE,MADW,CACJ;AAAA,uBAAUyJ,WAAW,OAArB;AAAA,aADI,EAEXtI,GAFW,CAEP;AAAA;AAAA,oBAAEiD,GAAF;AAAA,oBAAOC,KAAP;;AAAA,uBAAqB/H,gBAAM6M,MAAN,CAAaC,kBAAkBhF,GAAlB,CAAb,CAArB,WAA8DC,MAAMqF,QAAN,MAAoB,OAAlF;AAAA,aAFO,CAAhB;;AAIA1L,oBAAQ2L,MAAR,CAAeC,KAAf,CAAqB,OAAOtN,gBAAM6C,IAAN,CAAW,aAAX,CAAP,GAAmCqK,QAAQtG,IAAR,CAAa,IAAb,CAAnC,GAAwD,IAA7E;AACH;;;;;kBAGUzH,I","file":"Gren.js","sourceRoot":"/Users/kyeah/jam/github-release-notes/lib/src","sourcesContent":["import chalk from 'chalk';\nimport Github from 'github-api';\nimport utils from './_utils.js';\nimport { generate } from './_template.js';\nimport connectivity from 'connectivity';\nimport templateConfig from './templates.json';\nimport ObjectAssign from 'object-assign-deep';\nimport fs from 'fs';\n\nconst defaults = {\n    tags: [],\n    prefix: '',\n    template: templateConfig,\n    prerelease: false,\n    generate: false,\n    quiet: false,\n    override: false,\n    debug: false,\n    ignoreLabels: false,\n    ignoreIssuesWith: false,\n    ignoreCommitsWith: false,\n    groupBy: false,\n    milestoneMatch: 'Release {{tag_name}}'\n};\n\nconst MAX_TAGS_LIMIT = 99;\nconst TAGS_LIMIT = 30;\n\n/** Class creating release notes and changelog notes */\nclass Gren {\n    constructor(props = {}) {\n        this.options = ObjectAssign({}, defaults, props);\n        this.tasks = [];\n\n        const {\n            username,\n            repo,\n            token,\n            apiUrl,\n            tags,\n            limit,\n            ignoreLabels,\n            ignoreIssuesWith,\n            ignoreCommitsWith,\n            ignoreTagsWith\n        } = this.options;\n\n        this.options.tags = utils.convertStringToArray(tags);\n        this.options.ignoreLabels = utils.convertStringToArray(ignoreLabels);\n        this.options.ignoreIssuesWith = utils.convertStringToArray(ignoreIssuesWith);\n        this.options.ignoreCommitsWith = utils.convertStringToArray(ignoreCommitsWith);\n        this.options.ignoreTagsWith = utils.convertStringToArray(ignoreTagsWith);\n\n        if (limit && limit > 0 && limit <= MAX_TAGS_LIMIT) {\n            this.options.limit = limit;\n        } else if (this.options.tags.indexOf('all') >= 0) {\n            this.options.limit = MAX_TAGS_LIMIT;\n        } else {\n            this.options.limit = TAGS_LIMIT;\n        }\n\n        if (!token) {\n            throw chalk.red('You must provide the TOKEN');\n        }\n\n        if (this.options.debug) {\n            this._outputOptions(this.options);\n        }\n\n        const githubApi = new Github({\n            token\n        }, apiUrl);\n\n        this.repo = githubApi.getRepo(username, repo);\n        this.issues = githubApi.getIssues(username, repo);\n    }\n\n    /**\n     * Generate release notes and draft a new release\n     *\n     * @since  0.10.0\n     * @public\n     *\n     * @return {Promise}\n     */\n    async release() {\n        utils.printTask(this.options.quiet, 'Generate release notes');\n\n        await this._hasNetwork();\n        const blocks = await this._getReleaseBlocks();\n\n        return blocks.reduce((carry, block) => carry.then(this._prepareRelease.bind(this, block)), Promise.resolve());\n    }\n\n    /**\n     * Generate changelog file based on the release notes or generate new one\n     *\n     * @since  0.10.0\n     * @public\n     *\n     * @return {Promise}\n     */\n    async changelog() {\n        utils.printTask(this.options.quiet, 'Generate changelog file');\n\n        await this._hasNetwork();\n        this._checkChangelogFile();\n\n        const releases = this.options.generate ? await this._getReleaseBlocks() : await this._getListReleases();\n\n        if (releases.length === 0) {\n            throw chalk.red('There are no releases, use --generate to create release notes, or run the release command.');\n        }\n\n        return this._createChangelog(this._templateReleases(releases));\n    }\n\n    /**\n     * Check if the changelog file exists\n     *\n     * @since 0.8.0\n     * @private\n     *\n     * @return {string}\n     */\n    _checkChangelogFile() {\n        const filePath = process.cwd() + '/' + this.options.changelogFilename;\n\n        if (fs.existsSync(filePath) && !this.options.override) {\n            throw chalk.black(chalk.bgYellow('Looks like there is already a changelog, to override it use --override'));\n        }\n\n        return filePath;\n    }\n\n    /**\n     * Create the changelog file\n     *\n     * @since 0.8.0\n     * @private\n     *\n     * @param  {string} body The body of the file\n     */\n    _createChangelog(body) {\n        const loaded = utils.task(this, `Creating ${this.options.changelogFilename}`);\n        const filePath = process.cwd() + '/' + this.options.changelogFilename;\n\n        fs.writeFileSync(filePath, this.options.template.changelogTitle + body);\n\n        loaded(chalk.green(`\\nChangelog created in ${filePath}`));\n    }\n\n    /**\n     * Edit a release from a given tag (in the options)\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {number} releaseId The id of the release to edit\n     * @param  {Object} releaseOptions The options to build the release:\n     * @example\n     * {\n     *   \"tag_name\": \"v1.0.0\",\n     *   \"target_commitish\": \"master\",\n     *   \"name\": \"v1.0.0\",\n     *   \"body\": \"Description of the release\",\n     *   \"draft\": false,\n     *   \"prerelease\": false\n     * }\n     *\n     * @return {Promise}\n     */\n    async _editRelease(releaseId, releaseOptions) {\n        const loaded = utils.task(this, 'Updating latest release');\n        const { data: release } = await this.repo.updateRelease(releaseId, releaseOptions);\n\n        loaded(chalk.green(`${release.name} has been successfully updated!`) + chalk.blue(`\\nSee the results here: ${release.html_url}`));\n\n        return release;\n    }\n\n    /**\n     * Create a release from a given tag (in the options)\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param  {Object} releaseOptions The options to build the release:\n     * @example {\n     *   \"tag_name\": \"1.0.0\",\n     *   \"target_commitish\": \"master\",\n     *   \"name\": \"v1.0.0\",\n     *   \"body\": \"Description of the release\",\n     *   \"draft\": false,\n     *   \"prerelease\": false\n     * }\n     *\n     * @return {Promise}\n     */\n    async _createRelease(releaseOptions) {\n        const loaded = utils.task(this, 'Preparing the release');\n        const { data: release } = await this.repo.createRelease(releaseOptions);\n\n        loaded(chalk.green(`\\n${release.name} has been successfully created!`) + chalk.blue(`\\nSee the results here: ${release.html_url}`));\n\n        return release;\n    }\n\n    /**\n     * Creates the options to make the release\n     *\n     * @since 0.2.0\n     * @private\n     *\n     * @param  {Object[]} tags The collection of tags\n     *\n     * @return {Promise}\n     */\n    _prepareRelease(block) {\n        const releaseOptions = {\n            tag_name: block.release,\n            name: block.name,\n            body: block.body,\n            draft: this.options.draft,\n            prerelease: this.options.prerelease\n        };\n\n        if (block.id) {\n            if (!this.options.override) {\n                console.warn(chalk.black(chalk.bgYellow(`Skipping ${block.release} (use --override to replace it)`)));\n\n                return Promise.resolve();\n            }\n\n            return this._editRelease(block.id, releaseOptions);\n        }\n\n        return this._createRelease(releaseOptions);\n    }\n\n    /**\n     * Get the tags information from the given ones, and adds\n     * the next one in case only one is given\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Array|string} allTags\n     * @param  {Object[]} tags\n     *\n     * @return {Boolean|Array}\n     */\n    _getSelectedTags(allTags) {\n        const { tags } = this.options;\n\n        if (tags.indexOf('all') >= 0) {\n            return allTags;\n        }\n\n        if (!allTags || !allTags.length || !tags.length) {\n            return false;\n        }\n\n        const selectedTags = [].concat(tags);\n\n        return allTags.filter(({ name }, index) => {\n            const isSelectedTag = selectedTags.includes(name);\n\n            if (isSelectedTag && selectedTags.length === 1 && allTags[index + 1]) {\n                selectedTags.push(allTags[index + 1].name);\n            }\n            return isSelectedTag;\n        }).slice(0, 2);\n    }\n\n    /**\n     * Temporary function for this.repo.listReleases to accept options\n     *\n     * @see  https://github.com/github-tools/github/pull/485\n     * @param  {Object} options\n     *\n     * @return {Promise}\n     */\n    _listTags(options) {\n        return this.repo._request('GET', `/repos/${this.repo.__fullname}/tags`, options);\n    }\n\n    /**\n     * Get all the tags of the repo\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param {Array} releases\n     * @param {number} page\n     *\n     * @return {Promise}\n     */\n    async _getLastTags(releases, page = 1, limit = this.options.limit) {\n        const { headers: { link }, data: tags } = await this._listTags({\n            per_page: limit,\n            page\n        });\n\n        if (!tags.length) {\n            throw chalk.red('\\nLooks like you have no tags! Tag a commit first and then run gren again');\n        }\n\n        const filteredTags = (this._getSelectedTags(tags) || [tags[0], tags[1]])\n            .filter(Boolean)\n            .filter(({ name }) => this.options.ignoreTagsWith.every(ignoreTag => !name.match(ignoreTag)))\n            .map(tag => {\n                const tagRelease = releases ? releases.filter(release => release.tag_name === tag.name)[0] : false;\n                const releaseId = tagRelease ? tagRelease.id : null;\n\n                return {\n                    tag: tag,\n                    releaseId: releaseId\n                };\n            });\n        const totalPages = this._getLastPage(link);\n\n        if ((this.options.tags.indexOf('all') >= 0 || filteredTags.length < 2) && totalPages && +page < totalPages) {\n            return this._getLastTags(releases, page + 1).then(moreTags => moreTags.concat(filteredTags));\n        }\n\n        return filteredTags;\n    }\n\n    /**\n     * Get the dates of the last two tags\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param  {Object[]} tags List of all the tags in the repo\n     *\n     * @return {Promise[]}     The promises which returns the dates\n     */\n    _getTagDates(tags) {\n        return tags.map(async tag => {\n            const { data: { committer } } = await this.repo.getCommit(tag.tag.commit.sha);\n\n            return {\n                id: tag.releaseId,\n                name: tag.tag.name,\n                date: committer.date\n            };\n        });\n    }\n\n    /**\n     * Temporary function for this.repo.listReleases to accept options\n     *\n     * @see  https://github.com/github-tools/github/pull/485\n     * @param  {Object} options\n     *\n     * @return {Promise}\n     */\n    _listReleases(options) {\n        return this.repo._request('GET', `/repos/${this.repo.__fullname}/releases`, options);\n    }\n\n    /**\n     * Get the merged pull requests from the repo\n     *\n     * @private\n     *\n     * @param {number} page\n     * @param {number} limit\n     *\n     * @return {Promise[]}     The promises which returns pull requests\n     */\n    async _getMergedPullRequests(since, page = 1, limit = 100) {\n        const results = await this.repo.listPullRequests({\n            state: 'closed',\n            sort: 'updated',\n            direction: 'desc',\n            per_page: limit,\n            page\n        });\n\n        const { headers: { link }, data: prs } = results;\n        const totalPages = this._getLastPage(link);\n        const filterPrs = prs.filter(pr => pr.merged_at);\n        if (prs.length > 0 && since < prs[prs.length - 1].updated_at &&\n            totalPages && +page < totalPages) {\n            return this._getMergedPullRequests(since, page + 1).then(prsResults => prsResults.concat(filterPrs));\n        }\n\n        return filterPrs;\n    }\n\n    /**\n     * Get the last page from a Hypermedia link\n     *\n     * @since  0.11.1\n     * @private\n     *\n     * @param  {string} link\n     *\n     * @return {boolean|number}\n     */\n    _getLastPage(link) {\n        const linkMatch = Boolean(link) && link.match(/page=(\\d+)>; rel=\"last\"/);\n\n        return linkMatch && +linkMatch[1];\n    }\n\n    /**\n     * Get all releases\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @return {Promise} The promise which resolves an array of releases\n     */\n    async _getListReleases(page = 1, limit = this.options.limit) {\n        const loaded = utils.task(this, 'Getting the list of releases');\n        const { headers: { link }, data: releases } = await this._listReleases({\n            per_page: limit,\n            page\n        });\n\n        const totalPages = this._getLastPage(link);\n\n        if (this.options.tags.indexOf('all') >= 0 && totalPages && +page < totalPages) {\n            return this._getListReleases(page + 1).then(moreReleases => moreReleases.concat(releases));\n        }\n\n        loaded(`Releases found: ${releases.length}`);\n\n        return releases;\n    }\n\n    /**\n     * Generate the releases bodies from a release Objects Array\n     *\n     * @since 0.8.0\n     * @private\n     * @ignore\n     *\n     * @param  {Array} releases The release Objects Array coming from GitHub\n     *\n     * @return {string}\n     */\n    _templateReleases(releases) {\n        const { template } = this.options;\n\n        return releases.map(release => generate({\n            release: release.name,\n            date: utils.formatDate(new Date(release.published_at)),\n            body: release.body\n        }, template.release)).join(template.releaseSeparator);\n    }\n\n    /**\n     * Return the templated commit message\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param  {Object} commit\n     *\n     * @return {string}\n     */\n    // eslint-disable-next-line camelcase\n    _templateCommits({ sha, html_url, commit: { author: { name }, message } }) {\n        return generate({\n            sha,\n            message: message.split('\\n')[0],\n            url: html_url,\n            author: name\n        }, this.options.template.commit);\n    }\n\n    /**\n     * Generate the MD template from all the labels of a specific issue\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Object} issue\n     *\n     * @return {string}\n     */\n    _templateLabels(issue) {\n        const labels = Array.from(issue.labels);\n\n        if (!labels.length && this.options.template.noLabel) {\n            labels.push({name: this.options.template.noLabel});\n        }\n\n        return labels\n            .filter(label => this.options.ignoreLabels.indexOf(label.name) === -1)\n            .map(label => generate({\n                label: label.name\n            }, this.options.template.label)).join('');\n    }\n\n    /**\n     * Generate the MD template for each issue\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Object} issue\n     *\n     * @return {string}\n     */\n    _templateIssue(issue) {\n        return generate({\n            labels: this._templateLabels(issue),\n            name: issue.title,\n            text: '#' + issue.number,\n            url: issue.html_url\n        }, this.options.template.issue);\n    }\n\n    /**\n     * Generate the Changelog issues body template\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Object[]} blocks\n     *\n     * @return {string}\n     */\n    _templateBody(body, rangeBody) {\n        if (Array.isArray(body) && body.length) {\n            return body.join('\\n') + '\\n';\n        }\n\n        if (rangeBody) {\n            return `${rangeBody}\\n`;\n        }\n\n        return '*No changelog for this release.*\\n';\n    }\n\n    /**\n     * Generates the template for the groups\n     *\n     * @since  0.8.0\n     * @private\n     *\n     * @param  {Object} groups The groups to template e.g.\n     * {\n     *     'bugs': [{...}, {...}, {...}]\n     * }\n     *\n     * @return {string}\n     */\n    _templateGroups(groups) {\n        return Object.entries(groups).map(([key, value]) => {\n            const heading = generate({\n                heading: key\n            }, this.options.template.group);\n            const body = value.join('\\n');\n\n            return heading + '\\n' + body;\n        });\n    }\n\n    /**\n     * Filter a commit based on the includeMessages option and commit message\n     *\n     * @since  0.10.0\n     * @private\n     *\n     * @param  {Object} commit\n     *\n     * @return {Boolean}\n     */\n    _filterCommit({ commit: { message } }) {\n        const messageType = this.options.includeMessages;\n        const filterMap = {\n            merges: message => message.match(/^merge/i),\n            commits: message => !message.match(/^merge/i),\n            all: () => true\n        };\n        const shouldIgnoreMessage = this.options.ignoreCommitsWith.every(commitMessage => {\n            const regex = new RegExp(commitMessage, 'i');\n            return !message.split('\\n')[0].match(regex);\n        });\n\n        if (filterMap[messageType]) {\n            return filterMap[messageType](message) && shouldIgnoreMessage;\n        }\n\n        return filterMap.commits(message) && shouldIgnoreMessage;\n    }\n\n    /**\n     * Return a commit messages generated body\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param  {Array} commits\n     *\n     * @return {string}\n     */\n    _generateCommitsBody(commits = []) {\n        const bodyMessages = Array.from(commits);\n\n        if (bodyMessages.length === 1) {\n            bodyMessages.push(null);\n        }\n\n        return bodyMessages\n            .slice(0, -1)\n            .filter(this._filterCommit.bind(this))\n            .map(this._templateCommits.bind(this))\n            .join('\\n');\n    }\n\n    /**\n     * Gets all the commits between two dates\n     *\n     * @since 0.1.0\n     * @private\n     *\n     * @param  {string} since The since date in ISO\n     * @param  {string} until The until date in ISO\n     *\n     * @return {Promise}      The promise which resolves the [Array] commit messages\n     */\n    async _getCommitsBetweenTwo(since, until) {\n        const options = {\n            since: since,\n            until: until,\n            per_page: 100\n        };\n\n        const { data } = await this.repo.listCommits(options);\n\n        return data;\n    }\n\n    /**\n     * Get the blocks of commits based on release dates\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Array} releaseRanges The array of date ranges\n     *\n     * @return {Promise[]}\n     */\n    async _getCommitBlocks(releaseRanges) {\n        const taskName = 'Creating the body blocks from commits';\n        const loaded = utils.task(this, taskName);\n\n        const ranges = await Promise.all(\n            releaseRanges\n                .map(async range => {\n                    const [{ date: since }, { date: until }] = range;\n\n                    this.tasks[taskName].text = `Get commits between ${utils.formatDate(new Date(since))} and ${utils.formatDate(new Date(until))}`;\n                    const commits = await this._getCommitsBetweenTwo(range[1].date, range[0].date);\n\n                    return {\n                        id: range[0].id,\n                        name: this.options.prefix + range[0].name,\n                        release: range[0].name,\n                        published_at: range[0].date,\n                        body: this._generateCommitsBody(commits) + '\\n'\n                    };\n                })\n        );\n\n        loaded(`Commit ranges loaded: ${ranges.length}`);\n\n        return ranges;\n    }\n\n    /**\n     * Compare the ignored labels with the passed ones\n     *\n     * @since 0.10.0\n     * @private\n     *\n     * @param  {Array} labels   The labels to check\n     * @example [{\n     *     name: 'bug'\n     * }]\n     *\n     * @return {boolean}    If the labels array contains any of the ignore ones\n     */\n    _lablesAreIgnored(labels) {\n        if (!labels || !Array.isArray(labels)) {\n            return false;\n        }\n\n        const { ignoreIssuesWith } = this.options;\n\n        return ignoreIssuesWith.some(label => labels.map(({ name }) => name).includes(label));\n    }\n\n    /**\n     * Get all the closed issues from the current repo\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Array} releaseRanges The array of date ranges\n     *\n     * @return {Promise} The promise which resolves the list of the issues\n     */\n    async _getClosedIssues(releaseRanges) {\n        const type = {\n            issues: 'Issues',\n            milestones: 'Issues'\n        }[this.options.dataSource];\n        const loaded = utils.task(this, `Getting all closed ${type}`);\n        const { data: issues } = await this.issues.listIssues({\n            state: 'closed',\n            since: releaseRanges[releaseRanges.length - 1][1].date\n        });\n\n        loaded(`${type} found: ${issues.length}`);\n\n        return issues;\n    }\n\n    /**\n     * Group the issues based on their first label\n     *\n     * @since 0.8.0\n     * @private\n     *\n     * @param  {Array} issues\n     *\n     * @return {string}\n     */\n    _groupByLabel(issues) {\n        const groups = [];\n\n        Object.values(ObjectAssign({}, issues)).forEach(issue => {\n            if (!issue.labels.length) {\n                if (!this.options.template.noLabel) {\n                    return;\n                }\n\n                issue.labels.push({name: this.options.template.noLabel});\n            }\n\n            const labelName = issue.labels[0].name;\n\n            if (!groups[labelName]) {\n                groups[labelName] = [];\n            }\n\n            groups[labelName].push(this._templateIssue(issue));\n        });\n\n        return this._templateGroups(utils.sortObject(groups));\n    }\n\n    /**\n     * Create groups of issues based on labels\n     *\n     * @since  0.8.0\n     * @private\n     *\n     * @param  {Array} issues The array of all the issues.\n     *\n     * @return {Array}\n     */\n    _groupBy(passedIssues) {\n        const { groupBy } = this.options;\n        const issues = Object.values(ObjectAssign({}, passedIssues));\n\n        if (!groupBy || groupBy === 'false') {\n            return issues.map(this._templateIssue.bind(this));\n        }\n\n        if (groupBy === 'label') {\n            return this._groupByLabel(issues);\n        }\n\n        if (typeof groupBy !== 'object' || Array.isArray(groupBy)) {\n            throw chalk.red('The option for groupBy is invalid, please check the documentation');\n        }\n\n        const allLabels = Object.values(groupBy).reduce((carry, group) => carry.concat(group), []);\n        const groups = Object.keys(groupBy).reduce((carry, group, i, arr) => {\n            const groupIssues = issues.filter(issue => {\n                if (!issue.labels.length && this.options.template.noLabel) {\n                    issue.labels.push({name: this.options.template.noLabel});\n                }\n\n                return issue.labels.some(label => {\n                    const isOtherLabel = groupBy[group].indexOf('...') !== -1 && allLabels.indexOf(label.name) === -1;\n\n                    return groupBy[group].indexOf(label.name) !== -1 || isOtherLabel;\n                }) && !arr.filter(title => carry[title]).some(title => carry[title].indexOf(this._templateIssue(issue)) !== -1);\n            }).map(this._templateIssue.bind(this));\n\n            if (groupIssues.length) {\n                carry[group] = groupIssues;\n            }\n\n            return carry;\n        }, {});\n\n        return this._templateGroups(groups);\n    }\n\n    /**\n     * Filter the issue based on gren options and labels\n     *\n     * @since 0.9.0\n     * @private\n     *\n     * @param  {Object} issue\n     *\n     * @return {Boolean}\n     */\n    _filterIssue(issue) {\n        const { dataSource } = this.options;\n\n        return (issue.pull_request ? dataSource === 'prs' : dataSource === 'issues' | dataSource === 'milestones') && !this._lablesAreIgnored(issue.labels) &&\n            !((this.options.onlyMilestones || dataSource === 'milestones') && !issue.milestone);\n    }\n\n    /**\n     * Filter the pull request based on gren options and labels\n     * @private\n     *\n     * @param  {Object} pullRequest\n     *\n     * @return {Boolean}\n     */\n    _filterPullRequest(pullRequest) {\n        return !this._lablesAreIgnored(pullRequest.labels) && !(this.options.onlyMilestones && !pullRequest.milestone);\n    }\n\n    /**\n     * Filter the issue based on the date range, or if is in the release\n     * milestone.\n     *\n     * @since 0.9.0\n     * @private\n     *\n     * @param  {Array} range The release ranges\n     * @param  {Object} issue GitHub issue\n     *\n     * @return {Boolean}\n     */\n    _filterBlockIssue(range, issue) {\n        if (this.options.dataSource === 'milestones') {\n            return this.options.milestoneMatch.replace('{{tag_name}}', range[0].name) === issue.milestone.title;\n        }\n\n        return utils.isInRange(\n            Date.parse(issue.closed_at),\n            Date.parse(range[1].date),\n            Date.parse(range[0].date)\n        );\n    }\n\n    /**\n     * Filter the pull requests in case the release is milestone,\n     * or otherwise by dates range.\n     *\n     * @private\n     *\n     * @param  {Array} range The release ranges\n     * @param  {Object} pullRequest GitHub pull request\n     *\n     * @return {Boolean}\n     */\n    _filterBlockPullRequest(range, pullRequest) {\n        if (this.options.dataSource === 'milestones') {\n            return this.options.milestoneMatch.replace('{{tag_name}}', range[0].name) === pullRequest.milestone.title;\n        }\n\n        return utils.isInRange(\n            Date.parse(pullRequest.merged_at),\n            Date.parse(range[1].date),\n            Date.parse(range[0].date)\n        );\n    }\n\n    /**\n     * Get the blocks of issues based on release dates\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Array} releaseRanges The array of date ranges\n     *\n     * @return {Promise[]}\n     */\n    async _getIssueBlocks(releaseRanges) {\n        const issues = await this._getClosedIssues(releaseRanges);\n        const release = releaseRanges\n            .map(range => {\n                const filteredIssues = Array.from(issues)\n                    .filter(this._filterIssue.bind(this))\n                    .filter(this._filterBlockIssue.bind(this, range));\n                const body = (!range[0].body || this.options.override) && this._groupBy(filteredIssues);\n                return {\n                    id: range[0].id,\n                    release: range[0].name,\n                    name: this.options.prefix + range[0].name,\n                    published_at: range[0].date,\n                    body: this._templateBody(body, range[0].body)\n                };\n            });\n\n        return release;\n    }\n    /**\n     * Get the blocks of pull requests based on the release dates\n     *\n     * @private\n     *\n     * @param  {Array} releaseRanges The array of date ranges\n     *\n     * @return {Promise[]}\n     */\n    async _getPullRequestsBlocks(releaseRanges) {\n        const loaded = utils.task(this, `Getting all merged pull requests`);\n        const since = releaseRanges[releaseRanges.length - 1][1].date;\n        const prs = await this._getMergedPullRequests(since);\n\n        let totalPrs = 0;\n        const release = releaseRanges\n            .map(range => {\n                const filteredPullRequests = Array.from(prs)\n                    .filter(this._filterPullRequest.bind(this))\n                    .filter(this._filterBlockPullRequest.bind(this, range));\n                totalPrs += filteredPullRequests.length;\n                const body = (!range[0].body || this.options.override) && this._groupBy(filteredPullRequests);\n                return {\n                    id: range[0].id,\n                    release: range[0].name,\n                    name: this.options.prefix + range[0].name,\n                    published_at: range[0].date,\n                    body: this._templateBody(body, range[0].body)\n                };\n            });\n        loaded(`Pull Requests found: ${totalPrs}`);\n        return release;\n    }\n\n    /**\n     * Sort releases by dates\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param {Array} releaseDates\n     *\n     * @return {Array}\n     */\n    _sortReleasesByDate(releaseDates) {\n        return Array.from(releaseDates).sort((release1, release2) => new Date(release2.date) - new Date(release1.date));\n    }\n\n    /**\n     * Create the ranges of release dates\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @param  {Array} releaseDates The release dates\n     *\n     * @return {Array}\n     */\n    _createReleaseRanges(releaseDates) {\n        const ranges = [];\n        const range = 2;\n        const sortedReleaseDates = this._sortReleasesByDate(releaseDates);\n\n        if (sortedReleaseDates.length === 1 || this.options.tags.indexOf('all') >= 0) {\n            sortedReleaseDates.push({\n                id: 0,\n                date: new Date(0)\n            });\n        }\n\n        for (let i = 0; i < sortedReleaseDates.length - 1; i++) {\n            ranges.push(sortedReleaseDates.slice(i, i + range));\n        }\n\n        return ranges;\n    }\n\n    /**\n     * Generate release blocks based on issues or commit messages\n     * depending on the option.\n     *\n     * @return {Promise} Resolving the release blocks\n     */\n    async _getReleaseBlocks() {\n        const loaded = utils.task(this, 'Getting releases');\n        const dataSource = {\n            issues: this._getIssueBlocks.bind(this),\n            commits: this._getCommitBlocks.bind(this),\n            milestones: this._getIssueBlocks.bind(this),\n            prs: this._getPullRequestsBlocks.bind(this)\n        };\n        const releases = await this._getListReleases();\n        this.tasks['Getting releases'].text = 'Getting tags';\n\n        const tags = await this._getLastTags(releases.length ? releases : false);\n        this._validateRequiredTagsExists(tags, this.options.tags);\n        const releaseDates = await Promise.all(this._getTagDates(tags));\n\n        loaded(`Tags found: ${tags.map(({ tag: { name } }) => name).join(', ')}`);\n\n        return dataSource[this.options.dataSource](\n            this._createReleaseRanges(releaseDates)\n        );\n    }\n\n    /**\n     * Check that the require tags are exists in tags\n     *\n     * @param {Array} tags\n     * @param {Array} requireTags\n     *\n     * @throws{Exception} Will throw exception in case that\n     * @requireTags were set to 2 specific tags and these tags aren't exists in @tags\n     */\n    _validateRequiredTagsExists(tags, requireTags) {\n        if (requireTags.indexOf('all') >= 0 || !(requireTags instanceof Array)) return;\n\n        const tagsNames = tags.map(tagData => tagData.tag.name);\n\n        const missingTags = requireTags.filter(requireTag => tagsNames.indexOf(requireTag) < 0);\n        if (missingTags.length > 0) {\n            const inflection = (missingTags.length === 1) ? 'tag is' : 'tags are';\n            throw chalk.red(`\\nThe following ${inflection} not found in the repository: ${missingTags}. ` +\n                'please provide existing tags.');\n        }\n    }\n\n    /**\n     * Check if there is connectivity\n     *\n     * @since 0.5.0\n     * @private\n     *\n     * @return {Promise}\n     */\n    _hasNetwork() {\n        return new Promise(resolve => {\n            connectivity(isOnline => {\n                if (!isOnline) {\n                    console.warn(chalk.yellow('WARNING: Looks like you don\\'t have network connectivity!'));\n                }\n\n                resolve(isOnline);\n            });\n        });\n    }\n\n    /**\n     * Output the options in the terminal in a formatted way\n     *\n     * @param  {Object} options\n     */\n    _outputOptions(options) {\n        const camelcaseToSpaces = value => value.replace(/([A-Z])/g, ' $1').toLowerCase().replace(/\\w/, a => a.toUpperCase());\n        const outputs = Object.entries(options)\n            .filter(option => option !== 'debug')\n            .map(([key, value]) => `${chalk.yellow(camelcaseToSpaces(key))}: ${value.toString() || 'empty'}`);\n\n        process.stdout.write('\\n' + chalk.blue('Options: \\n') + outputs.join('\\n') + '\\n');\n    }\n}\n\nexport default Gren;\n"]}