{"version":3,"sources":["Program.js"],"names":["Program","props","_consumeOptions","options","programOptions","defaults","name","description","examples","program","_programWithEvents","_programWithOptions","events","parse","argv","cwd","config","_getOptionsFromObject","_getEnvOptions","_filterObject","_camelCaseObjectKeys","concat","githubInfo","GitHubInfo","username","repo","token","object","filter","key","value","undefined","reduce","carry","length","forEach","event","action","on","defaultValue","option","Boolean","opts","Array","isArray","map","short","valueType","opt","_dashToCamelCase","replace","match","toUpperCase"],"mappings":"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","file":"Program.js","sourceRoot":"/Users/kyeah/jam/github-release-notes/lib/src","sourcesContent":["import GitHubInfo from './GitHubInfo';\nimport program from 'commander';\nimport { getConfigFromFile } from './_utils.js';\n\n/** Class creating a Commander program, managing the options passed via bash and config file. */\nclass Program {\n    constructor(props) {\n        const { programOptions, defaults } = this._consumeOptions(props.options);\n\n        this.name = props.name;\n        this.description = props.description;\n        this.examples = props.examples;\n        this.defaults = defaults;\n        this.program = this._programWithEvents(this._programWithOptions(program, programOptions), props.events)\n            .name(this.name)\n            .description(this.description)\n            .parse(props.argv);\n\n        this.options = Object.assign(\n            {},\n            getConfigFromFile(props.cwd, program.config),\n            this._getOptionsFromObject(this.program, this.defaults)\n        );\n    }\n\n    /**\n     * Initialise the module\n     *\n     * @since 0.10.0\n     * @public\n     *\n     * @return {Promise}\n     */\n    async init() {\n        const options = await this._getEnvOptions();\n        this.options = this._filterObject(this._camelCaseObjectKeys(\n            Object.assign(\n                {},\n                this.defaults,\n                Object.assign({}, ...[].concat(options)),\n                this.options\n            )\n        ));\n\n        return this.options;\n    }\n\n    /**\n     * Get informations from the local folder\n     *\n     * @since 0.10.0\n     * @private\n     *\n     * @return {Promise}\n     */\n    _getEnvOptions() {\n        const githubInfo = new GitHubInfo();\n        const { username, repo } = this.options;\n\n        if (username && repo) {\n            return githubInfo.token;\n        }\n\n        return githubInfo.options;\n    }\n\n    /**\n     * Remove all the properties that have undefined values from an object\n     *\n     * @since  0.10.0\n     * @private\n     *\n     * @param  {Object} object\n     *\n     * @return {Object}\n     */\n    _filterObject(object) {\n        return Object.entries(object)\n            .filter(([key, value]) => value !== undefined)\n            .reduce((carry, [key, value]) => {\n                carry[key] = value;\n                return carry;\n            }, {});\n    }\n\n    /**\n     * Add all the given events to a program\n     *\n     * @since  0.10.0\n     * @private\n     *\n     * @param  {Commander} program\n     * @param  {Object} events\n     *\n     * @return {Commander}\n     */\n    _programWithEvents(program, events) {\n        if (!events || !events.length) {\n            return program;\n        }\n\n        Object.entries(events).forEach(([event, action]) => {\n            program.on(event, action);\n        });\n\n        return program;\n    }\n\n    /**\n     * Add all the given options to a program\n     *\n     * @since 0.10.0\n     * @private\n     *\n     * @param  {Commander} program\n     * @param  {Array} options\n     *\n     * @return {Commander}\n     */\n    _programWithOptions(program, options) {\n        options.forEach(({ name, description, action, defaultValue }) => program.option(...[name, description, action, defaultValue].filter(Boolean)));\n        return program;\n    }\n\n    /**\n     * Consume the options from the properties and provide get the defaults and the programOptions\n     *\n     * @since  0.10.0\n     * @private\n     *\n     * @param  {Array} opts\n     *\n     * @return {Object}\n     */\n    _consumeOptions(opts = []) {\n        if (!Array.isArray(opts)) {\n            return {\n                programOptions: [],\n                defaults: {}\n            };\n        }\n\n        const programOptions = opts.map(({ short, name, valueType, description, defaultValue, action }) => ({\n            name: short && name ? `${short}, --${name} ${valueType || ''}` : ' ',\n            description,\n            defaultValue,\n            action\n        }));\n\n        const defaults = this._camelCaseObjectKeys(\n            opts.reduce((carry, opt) => {\n                carry[opt.name] = opt.defaultValue;\n                return carry;\n            }, {})\n        );\n\n        return {\n            programOptions,\n            defaults\n        };\n    }\n\n    /**\n     * Extrapulate the options from a program\n     *\n     * @since  0.10.0\n     * @private\n     *\n     * @param  {Object} defaults\n     *\n     * @return {Object}\n     */\n    _getOptionsFromObject(object = {}, defaults = {}) {\n        if (typeof object !== 'object' || Array.isArray(object)) {\n            return {};\n        }\n\n        return Object.keys(defaults).reduce((carry, option) => {\n            if (object[option] && object[option] !== defaults[option]) {\n                carry[option] = object[option];\n            }\n\n            return carry;\n        }, {});\n    }\n\n    /**\n     * Converts all Object values to camel case\n     *\n     * @param  {Object} object\n     *\n     * @return {Object}\n     */\n    _camelCaseObjectKeys(object = {}) {\n        if (typeof object !== 'object' || Array.isArray(object)) {\n            return {};\n        }\n\n        return Object.entries(object).reduce((carry, [key, value]) => {\n            carry[this._dashToCamelCase(key)] = value;\n            return carry;\n        }, {});\n    }\n\n    /**\n    * Transforms a dasherize string into a camel case one.\n    *\n    * @since 0.3.2\n    * @private\n    *\n    * @param  {string} value The dasherize string\n    *\n    * @return {string}       The camel case string\n    */\n    _dashToCamelCase(value = '') {\n        if (typeof value !== 'string') {\n            return '';\n        }\n\n        return value\n            .replace(/-([a-z])/g, (match) => match[1].toUpperCase());\n    }\n}\n\nexport default Program;\n"]}